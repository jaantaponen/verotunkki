{"version":3,"sources":["components/Copyright.tsx","components/Frontpage.tsx","components/Dropzone.tsx","utils/parsers/translations.ts","utils/parsers/types.ts","utils/parsers/helpers.ts","utils/parsers/loadTransactions.ts","components/tableSettings.tsx","components/ResultTable.tsx","components/ResultCard.tsx","utils/fifo/fifo.ts","components/PreviewData.tsx","index.tsx"],"names":["Copyright","Stack","direction","justifyContent","alignItems","spacing","width","sx","pt","Typography","alignSelf","align","component","variant","color","Link","href","Date","getFullYear","FrontPageContent","navigate","useNavigate","theme","createTheme","typography","fontSize","ThemeProvider","GlobalStyles","styles","ul","margin","padding","listStyle","CssBaseline","Container","maxWidth","pb","gutterBottom","fontWeight","Card","onClick","CardActionArea","CardContent","Dropzone","zoneHeight","handleFiles","paddingTop","height","acceptedFiles","onAdd","onDelete","fileObj","console","log","onAlert","message","Icon","UploadFileIcon","dropzoneText","fileObjects","degiroFiToEn","translateDegiro","key","CoinBaseProHeaderValues","CoinBaseHeaderValues","DegiroHeaderValues","NordnetHeaderValues","decodeUTF16LE","binaryStr","cp","i","length","push","charCodeAt","String","fromCharCode","chooseCSVParser","filesCopy","parsers","a","errors","inputFile","data","toString","split","fileContentBuffer","name","atob","str","decodeURIComponent","escape","window","fileContent","parsedData","Source","Error","find","e","TypeError","loadParser","parse","parseDegiroCSV","input","prevField","tmp","cast","value","context","header","columns","trim","results","record","records","map","transaction","moment","date","time","toDate","every","x","_","difference","sortBy","Object","keys","parseNordNetCSV","delimiter","includes","replace","column","Number","parseFloat","parseCoinbaseCSV","startAt","findIndex","o","startsWith","tz","toUpperCase","from_line","parseCoinbaseProCSV","product","pricefeetotalunit","undefined","columnsTransaction","id","label","minWidth","format","toFixed","columnsSecurity","columnsCrypto","ResultTable","rows","mode","useState","page","setPage","rowsPerPage","setRowsPerPage","useEffect","scrollTo","Paper","overflow","TableContainer","maxHeight","Table","stickyHeader","TableHead","TableRow","TableCell","style","TableBody","slice","row","index","hover","role","tabIndex","TablePagination","rowsPerPageOptions","count","onPageChange","event","newPage","onRowsPerPageChange","target","ResultCard","content","footer","footerSecondary","contentColor","palette","background","paper","text","primary","secondary","action","active","Box","bgcolor","boxShadow","borderRadius","p","display","mx","calculateFIFOTransactions","operationHistory","history","obj","filter","type","reduce","capitalGainPerSellDate","sale","calculateCapitalGainsForSale","calculateFIFOCapitalGains","flatMap","gainByDate","totalAmount","sumBy","transactions","amountsold","dividedFees","transferFee","transferFeeForSell","transferFeeSummedFromSELLOperation","error","ticker","relatedBuyTransactions","symbol","orderBy","forEach","buy","amountSold","Math","min","amount","trs","buydate","selldate","transferPrice","price","profitOrLoss","acquisitionPrice","acquisitionFee","transactionFee","totalPrice","round","toLocaleString","timeZone","parsersCrypto","parsersSecurity","PreviewData","setZoneHeight","files","setFiles","showTable","setShowTable","setRows","rawData","setRawData","setResults","parseError","setParseError","errorFifo","setErrorFifo","showCurrencyFetchButton","setShowCurrencyFetchButton","calculatedResults","setCalculatedResults","createColumnsFromRaw","newRawData","columnData","Coinbase","Subtotal","QuantityTransacted","SpotPriceatTransaction","SpotPriceCurrency","paivays","Timestamp","tuote","Asset","arvo","maara","kulut","Fees","kurssi","kokonaissumma","Total","operaatio","TransactionType","currencyError","CoinbasePro","createdat","size","fee","total","side","getCoinbaseProAsColumns","datetime","toUTCString","security","isin","ISIN","valueCurrency","quantity","transactionCosts","rate","rateCurrency","totalAmountCurrency","getDegiroAsColumns","Degiro","Kauppapaiva","Arvopaperi","Summa","Valuutta","Maara","Kokonaiskulut","Kurssi","getNordnetAsColumns","Nordnet","flatten","dataSource","msg","Alert","severity","file","capitalGains","capitalLosses","transactionTotal","netProfit","pl","Button","Promise","all","requestDate","axios","get","sizeunit","unitAsEur","percentageOfFee","totalInEur","totalFee","fixedCurrencies","endIcon","startIcon","disabled","fifoData","prepareRawFifo","statement","info","Notes","boughAmount","boughtCurrency","concat","prepareCoinbaseForFIFO","prepareCoinbaseProForFIFO","max","prepareDegiroForFIFO","Tapahtumatyyppi","prepareNordnetForFIFO","finalFifo","toISOString","substring","abs","ReactDOM","render","basename","process","path","element","document","getElementById"],"mappings":"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","file":"static/js/main.4a6cbc99.chunk.js","sourcesContent":["import Link from '@mui/material/Link';\r\nimport Typography from '@mui/material/Typography';\r\nimport { Stack} from '@mui/material';\r\n\r\nconst Copyright = () => {\r\n    return (\r\n        <Stack\r\n            direction=\"column\"\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n            spacing={1}\r\n            width={\"sm\"}\r\n            sx={{ pt: 2 }}\r\n        >\r\n            <Typography alignSelf=\"center\" align=\"center\" component=\"p\" sx={{ pt: 4 }}>\r\n                Tarkista tiedot aina itse virheiden varalta.\r\n            </Typography>\r\n            <Typography alignSelf=\"center\" align=\"center\" component=\"p\" sx={{ pt: 0 }}>\r\n                Olet itse vastuussa omista veroistasi.\r\n            </Typography>\r\n            <Typography alignSelf=\"center\" align=\"center\" component=\"p\" sx={{ pt: 0 }}>\r\n                Sivustolle lähettämiäsi tiedostoja käsitellään vain paikallisesti selaimessasi.\r\n            </Typography>\r\n            <Typography variant=\"body2\" sx={{ pt: 2 }} color=\"text.secondary\" align=\"center\" >\r\n                {'Copyright © '}\r\n                <Link color=\"inherit\" href=\"https://verotunkki.fi/\">\r\n                    Verotunkki\r\n                </Link>{' '}\r\n                {new Date().getFullYear()}\r\n                {'.'}\r\n            </Typography>\r\n        </Stack>\r\n    );\r\n}\r\n\r\nexport { Copyright }\r\n","import { Fragment } from 'react'\r\n\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport Grid from '@mui/material/Grid';\r\nimport Link from '@mui/material/Link';\r\nimport GlobalStyles from '@mui/material/GlobalStyles';\r\nimport Container from '@mui/material/Container';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport CardMedia from '@mui/material/CardMedia';\r\nimport { Copyright } from './Copyright'\r\nimport Typography from '@mui/material/Typography';\r\nimport { CardActionArea, createTheme, Paper, Stack, styled, ThemeProvider } from '@mui/material';\r\n\r\nconst FrontPageContent = () => {\r\n    const navigate = useNavigate();\r\n    const theme = createTheme({\r\n        typography: {\r\n            fontSize: 14,\r\n        },\r\n    });\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <GlobalStyles styles={{ ul: { margin: 0, padding: 0, listStyle: 'none' } }} />\r\n            <CssBaseline />\r\n            <Container component=\"main\" maxWidth=\"sm\" sx={{ pt: 8, pb: 4 }}>\r\n                <Stack\r\n                    direction=\"column\"\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"center\"\r\n                    spacing={6}\r\n                    width=\"sm\"\r\n\r\n                >\r\n                    <Typography\r\n                        component=\"h1\"\r\n                        variant=\"h3\"\r\n                        align=\"center\"\r\n                        color=\"text.primary\"\r\n                        gutterBottom\r\n                        sx={{ fontWeight: 'bold', pt: 8 }}\r\n                    >\r\n                        VEROTUNKKI\r\n                    </Typography>\r\n                    <Typography alignSelf=\"center\" align=\"center\" variant=\"h6\" sx={{ pt: 3 }} component=\"p\">\r\n                        Verotunkki laskee puolestasi luovutusvoitot ja -tappiot, ja ulostaa verottajayhteensopivan\r\n                        rapsan. Hyvä elämä vittu\r\n                    </Typography>\r\n                    <Typography alignSelf=\"center\" variant=\"h6\" component=\"p\" sx={{ pt: 2 }}>\r\n                        Valitse verotettavan tulon tyyppi:\r\n                    </Typography>\r\n                    <Card sx={{ width: 450 }} onClick={() => {\r\n                        navigate(\"/crypto\");\r\n                    }}>\r\n                        <CardActionArea>\r\n                            <CardContent>\r\n                                <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n                                    Virtuaalivaluutat\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                    Perus hyvä Ethereum.\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                    Tuetut lähteet: <b>Coinbase, Coinbase Pro</b>\r\n                                </Typography>\r\n                            </CardContent>\r\n                        </CardActionArea>\r\n                    </Card>\r\n                    <Card sx={{ width: 450 }} onClick={() => {\r\n                        navigate(\"/securities\");\r\n                    }}>\r\n                        <CardActionArea>\r\n                            <CardContent>\r\n                                <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n                                    Arvopaperit\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                    Osakkeet ETF:t, rahastot ja muut arvopaperit.\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                    Tuetut lähteet: <b>Degiro, Nordnet</b>\r\n                                </Typography>\r\n                            </CardContent>\r\n                        </CardActionArea>\r\n                    </Card>\r\n                </Stack>\r\n                <Copyright />\r\n            </Container>\r\n        </ThemeProvider>\r\n    );\r\n}\r\n\r\nexport { FrontPageContent as Frontpage }\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport Container from '@mui/material/Container';\r\nimport { DropzoneAreaBase, FileObject } from 'react-mui-dropzone';\r\nimport UploadFileIcon from '@mui/icons-material/UploadFile';\r\nimport { createTheme, ThemeProvider } from '@mui/material';\r\n\r\n\r\ninterface Props {\r\n    zoneHeight: number,\r\n    handleFiles: (arg0: FileObject[]) => void;\r\n}\r\n\r\nconst Dropzone = ({ zoneHeight, handleFiles }: Props) => {\r\n    \r\n\r\n    const handleAlert = (message: any, variant: any) => {\r\n        console.log(`${variant}: ${message}`)\r\n    }\r\n    /***\r\n     * \r\n     * TODO REFACTOR ZONEHEIGHT INTO ENUM/BETTER LOGIC\r\n     */\r\n\r\n    return (\r\n        <Container sx={{\r\n            pt: 4, pb: 3,\r\n            width: \"100%\",\r\n            '& .MuiDropzoneArea-textContainer': {\r\n                color: 'black'\r\n            },\r\n            '& .MuiDropzoneArea-text': {\r\n                paddingTop: zoneHeight > 200 ? 8 : 4,\r\n                fontSize: 20,\r\n            },\r\n            '& .MuiDropzoneArea-root': {\r\n                height: zoneHeight,\r\n            },\r\n        }}>\r\n            <DropzoneAreaBase\r\n                acceptedFiles={['text/x-csv', 'text/plain', 'application/vnd.ms-excel']}\r\n                onAdd={handleFiles}\r\n                onDelete={(fileObj) => console.log('Removed File:', fileObj)}\r\n                onAlert={handleAlert}\r\n                Icon={UploadFileIcon as any}\r\n                dropzoneText={zoneHeight > 200 ? \"Pudota CSV-tiedostoja tähän\" : \"Pudota lisää CSV-tiedostoja tähän\"}\r\n                fileObjects={[]}\r\n            />\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport { Dropzone }","const degiroFiToEn = {\n    \"Päiväys\": \"date\",\n    \"Aika\": \"time\",\n    \"Tuote\": \"security\",\n    \"ISIN\": \"ISIN\",\n    \"Reference\": \"reference\",\n    \"Venue\": \"venue\",\n    \"Quantity\": \"quantity\",\n    \"Kurssi\": \"rate\",\n    \"Kurssi-valuutta\": \"rateCurrency\",\n    \"Markkina-arvo\": \"marketValue\",\n    \"Markkina-arvo-valuutta\": \"marketValueCurrency\",\n    \"Value\": \"value\",\n    \"Value-valuutta\": \"valueCurrency\",\n    \"Vaihtokurssi\": \"exchangeRate\",\n    \"Transaction costs\": \"transactionCosts\",\n    \"Transaction costs-valuutta\": \"transactionCostsCurrency\",\n    \"Kokonaissumma\": \"totalAmount\",\n    \"Kokonaissumma-valuutta\": \"totalAmountCurrency\",\n    \"Order ID\": \"orderId\"\n}\n\nconst translateDegiro = (key: keyof typeof degiroFiToEn) => {\n    if (degiroFiToEn[key]) {\n        return degiroFiToEn[key]\n    }\n}\n\nexport default translateDegiro;","export interface DegiroHeaders {\n  time: string;\n  security: string;\n  ISIN: string;\n  reference: string;\n  venue: string;\n  quantity: number;\n  rate: number;\n  rateCurrency: string;\n  marketValue: number;\n  marketValueCurrency: string;\n  value: number;\n  valueCurrency: string;\n  exchangeRate: number;\n  transactionCosts: number;\n  transactionCostsCurrency: string;\n  totalAmount: number;\n  totalAmountCurrency: string;\n  orderId: string;\n  datetime: Date;\n  Source: \"Degiro\";\n  Error?: string;\n}\n\nexport interface CoinbaseHeaders {\n  Timestamp: Date;\n  TransactionType: \"BUY\" | \"SELL\" | \"RECEIVE\" | \"CONVERT\" | \"COINBASE EARN\";\n  Asset: string;\n  QuantityTransacted: number;\n  SpotPriceCurrency: string;\n  SpotPriceatTransaction: number;\n  Subtotal: number;\n  Total: number;\n  Fees: number;\n  Notes: string;\n  Source: \"Coinbase\";\n  Error?: string;\n}\n\nexport interface NordnetHeaders {\n  Id: string;\n  Kirjauspaiva: Date;\n  Kauppapaiva: Date;\n  Maksupaiva: string;\n  Salkku: string;\n  Tapahtumatyyppi: string;\n  Arvopaperi: string;\n  Instrumenttityyppi: string;\n  ISIN: string;\n  Maara: number;\n  Kurssi: number;\n  Korko: string;\n  Kokonaiskulut: number;\n  KokonaiskulutValuutta: string;\n  Summa: number;\n  Valuutta: string;\n  Hankintaarvo: string;\n  Tulos: string;\n  Kokonaismaara: number;\n  Saldo: string;\n  Vaihtokurssi: string;\n  Tapahtumateksti: string;\n  Mitatointipaiva: string;\n  Laskelma: string;\n  Vahvistusnumero: string;\n  Valityspalkkio: number;\n  ValityspalkkioValuutta: string;\n  Source: \"Nordnet\";\n  Error?: string;\n}\n\nexport interface CoinbaseProHeaders {\n  portfolio: string;\n  tradeid: string;\n  product: string;\n  side: string;\n  createdat: Date;\n  size: number;\n  sizeunit: string;\n  price: number;\n  fee: number;\n  total: number;\n  pricefeetotalunit: string;\n  Source: \"CoinbasePro\"\n  Error?: string;\n}\n\nexport const CoinBaseProHeaderValues = [\n  \"portfolio\",\n  \"tradeid\",\n  \"product\",\n  \"side\",\n  \"createdat\",\n  \"size\",\n  \"sizeunit\",\n  \"price\",\n  \"fee\",\n  \"total\",\n  \"pricefeetotalunit\"\n]\n\nexport const CoinBaseHeaderValues = [\n  'Timestamp',\n  'TransactionType',\n  'Asset',\n  'QuantityTransacted',\n  'SpotPriceCurrency',\n  'SpotPriceatTransaction',\n  'Subtotal',\n  'Total',\n  'Fees',\n  'Notes',\n]\n\nexport const DegiroHeaderValues = [\n  'date',\n  'time',\n  'security',\n  'ISIN',\n  'reference',\n  'venue',\n  'quantity',\n  'rate',\n  'rateCurrency',\n  'marketValue',\n  'marketValueCurrency',\n  'value',\n  'valueCurrency',\n  'exchangeRate',\n  'transactionCosts',\n  'transactionCostsCurrency',\n  'totalAmount',\n  'totalAmountCurrency',\n  'orderId',\n  'datetime'\n]\n\nexport const NordnetHeaderValues = [\n  'Id', 'Kirjauspaiva',\n  'Kauppapaiva', 'Maksupaiva',\n  'Salkku', 'Tapahtumatyyppi',\n  'Arvopaperi', 'Instrumenttityyppi',\n  'ISIN', 'Maara',\n  'Kurssi', 'Korko',\n  'Kokonaiskulut', 'KokonaiskulutValuutta',\n  'Summa', 'Valuutta',\n  'Hankintaarvo', 'Tulos',\n  'Kokonaismaara', 'Saldo',\n  'Vaihtokurssi', 'Tapahtumateksti',\n  'Mitatointipaiva', 'Laskelma',\n  'Vahvistusnumero', 'Valityspalkkio',\n  'ValityspalkkioValuutta'\n]\n","import { FileObject } from \"react-mui-dropzone\";\r\n\r\n/**\r\n * Workaround for browsers.\r\n * https://developer.mozilla.org/en-US/docs/Glossary/Base64#solution_1_%E2%80%93_escaping_the_string_before_encoding_it\r\n */\r\nconst b64_to_utf8 = (str: string) => (decodeURIComponent(escape(window.atob(str))))\r\n\r\nconst decodeUTF16LE = (binaryStr: string) => {\r\n    const cp = [];\r\n    for (let i = 0; i < binaryStr.length; i += 2)\r\n        cp.push(binaryStr.charCodeAt(i) | (binaryStr.charCodeAt(i + 1) << 8));\r\n    return String.fromCharCode(...cp);\r\n}\r\n\r\n/**\r\n * Gets the current file and checks it againts parsers.\r\n * @param filesCopy \r\n * @returns headers\r\n */\r\nconst chooseCSVParser = async (filesCopy: FileObject[], parsers: any[]) => {\r\n    const errors: Error[] = []\r\n    for (let i = 0; i < parsers.length; i++) {\r\n        try {\r\n            const inputFile = filesCopy[0].data ? filesCopy[0].data.toString().split(',')[1] : \"\"\r\n            const fileContentBuffer = parsers[i].name === 'parseNordNetCSV' ? decodeUTF16LE(atob(inputFile)) : b64_to_utf8(inputFile)\r\n            const fileContent = fileContentBuffer.toString()\r\n            const parsedData = await parsers[i](fileContent)\r\n            return parsedData\r\n        } catch (e: any) {\r\n            errors.push(e)\r\n        }\r\n    }\r\n    return [{ Source: \"Error\", Error: (errors.find(e => (e instanceof TypeError)) ?? errors[0]) }]\r\n}\r\n\r\n/**\r\n * Due to Jest (26.x.x) being the latest stable release, we have to default to commonjs module for tests.\r\n * The ESM module support through Babel was not sufficient and resulted in different behaviour. \r\n * @returns parse function\r\n */\r\nconst loadParser: any = async () => (process.env.NODE_ENV === 'test' ?\r\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n    // @ts-ignore  \r\n    (await import('csv/dist/cjs/sync.cjs')).parse :\r\n    (await import('csv/dist/esm/sync')).parse\r\n)\r\n\r\n\r\n\r\nexport { chooseCSVParser, loadParser }","import translateDegiro from './translations'\nimport moment from 'moment';\nimport 'moment-timezone';\nimport { Operation } from '../fifo/types'\nimport { DegiroHeaders, CoinbaseHeaders, CoinbaseProHeaders, CoinBaseProHeaderValues, CoinBaseHeaderValues, DegiroHeaderValues, NordnetHeaderValues, NordnetHeaders } from './types'\nimport { ColumnDataCrypto, ColumnDataSecurity } from '../../components/tableSettings'\nimport _ from 'lodash';\nimport { loadParser } from './helpers';\n\n\nconst parseDegiroCSV = async (input: string): Promise<DegiroHeaders[]> => {\n    let prevField = \"\"\n    const parse = await loadParser()\n    const tmp = parse(input, {\n        cast: (value: any, context: any) => {\n            if (context.header) {\n                if (value === '') return translateDegiro(`${prevField}-valuutta` as any);\n                prevField = value\n                return translateDegiro(value)\n            }\n            return String(value)\n        },\n        columns: true,\n        trim: true,\n    });\n\n    const results = []\n    for await (const record of tmp) {\n        results.push(record)\n    }\n\n    const records: DegiroHeaders[] = results.map((transaction: any) => {\n        transaction['datetime'] = moment(`${transaction.date}-${transaction.time}`, \"DD-MM-YYYY-HH-mm\").toDate()\n        return transaction\n    })\n\n    if (results.every(x => _.difference(_.sortBy(DegiroHeaderValues), _.sortBy(Object.keys(x))).length !== 0)) {\n        throw TypeError('All headers not found in the provided Degiro file.')\n    }\n\n    return records.map(x => ({\n        ...x, \"Source\": \"Degiro\"\n    }))\n\n}\n\nconst getDegiroAsColumns = (records: DegiroHeaders[]): ColumnDataSecurity[] => {\n    const ret = records.map(record => {\n        return {\n            paivays: record.datetime.toUTCString(),\n            tuote: record.security,\n            isin: record.ISIN,\n            arvo: `${record.value} ${record.valueCurrency}`,\n            maara: record.quantity,\n            kulut: record.transactionCosts,\n            kurssi: `${record.rate} ${record.rateCurrency}`,\n            kokonaissumma: `${record.totalAmount} ${record.totalAmountCurrency}`,\n        } as ColumnDataSecurity\n    })\n    return ret\n}\n\nconst prepareDegiroForFIFO = (rawData: DegiroHeaders[]): Operation[] => {\n    return rawData\n        .map(record => {\n            return {\n                symbol: record.security,\n                date: record.datetime,\n                price: record.rate,\n                amount: record.quantity,\n                type: record.quantity > 0 ? \"BUY\" : \"SELL\",\n                transactionFee: Math.max(record.transactionCosts),\n            }\n        })\n}\n\n\nconst parseNordNetCSV = async (input: string): Promise<NordnetHeaders[]> => {\n    const parse = await loadParser()\n    const tmp = parse(input, {\n        delimiter: [\"\\t\"],\n        columns: true,\n        trim: true,\n        cast: (value: any, context: any) => {\n            if (context.header) {\n                let header = value\n                if (header.includes('ä')) header = header.replace(/ä/g, 'a')\n                if (header.includes('ö')) header = header.replace(/ö/g, 'o')\n                if (header.includes('-')) header = header.replace(/-/g, '')\n                return header.replace(/\\s/g, '')\n            }\n            const column = context.column\n            //these are probably unneeded\n            if (column === 'Maara' ||\n                column === 'Kurssi' ||\n                column === 'Valityspalkkio' ||\n                column === 'Summa' ||\n                column === 'Kokonaiskulut' ||\n                column === 'Kokonaismaara') return Number.parseFloat(value.replace(/,/g, '.'));\n            if (column === 'Kirjauspaiva' ||\n                column === 'Kauppapaiva' ||\n                column === 'Maksupaiva') return moment(value, \"YYYY-MM-DD\").toDate()\n            return String(value)\n        },\n    })\n\n    const results = []\n    for await (const record of tmp) {\n        results.push(record)\n    }\n\n    if (results.every(x => _.difference(NordnetHeaderValues, _.sortBy(Object.keys(x))).length !== 0)) {\n        throw TypeError('All headers not found in the provided Nordnet file.')\n    }\n\n    return results.map(x => ({\n        ...x, \"Source\": \"Nordnet\"\n    })) as NordnetHeaders[]\n}\n\nconst getNordnetAsColumns = (records: NordnetHeaders[]): ColumnDataSecurity[] => {\n    const ret = records.map(record => {\n        return {\n            paivays: record.Kauppapaiva.toUTCString(),\n            tuote: record.Arvopaperi,\n            isin: record.ISIN,\n            arvo: `${record.Summa} ${record.Valuutta}`,\n            maara: record.Maara,\n            kulut: record.Kokonaiskulut,\n            kurssi: `${record.Kurssi} ${record.Valuutta}`,\n            kokonaissumma: `${record.Summa - record.Kokonaiskulut} ${record.Valuutta}`,\n        } as ColumnDataSecurity\n    })\n    return ret\n}\n\n\nconst prepareNordnetForFIFO = (rawData: NordnetHeaders[]): Operation[] => {\n    return rawData\n        .filter(x => x.Tapahtumatyyppi === 'MYYNTI' || x.Tapahtumatyyppi === 'OSTO')\n        .map(record => {\n            return {\n                symbol: record.Arvopaperi,\n                date: record.Kauppapaiva,\n                price: record.Kurssi,\n                amount: record.Maara,\n                type: record.Tapahtumatyyppi === 'OSTO' ? \"BUY\" : \"SELL\",\n                transactionFee: record.Kokonaiskulut,\n            }\n        })\n}\n\n\nconst parseCoinbaseCSV = async (input: string): Promise<CoinbaseHeaders[]> => {\n    const startAt = _.findIndex(input?.split('\\n'), (o) => o?.startsWith('Timestamp,Transaction'))\n    const parse = await loadParser()\n    const results = parse(input, {\n        cast: (value: any, context: any) => {\n            if (context.header) {\n                if (value.includes('(')) return value.split('(')[0].replace(/\\s/g, '')\n                return value.replace(/\\s/g, '')\n            }\n            moment.tz\n            if (context.column === 'Timestamp') return moment(value, \"YYYY-MM-DD-HH-mm\").tz('Europe/Helsinki').toDate()\n            if (context.column === 'TransactionType') return value.toUpperCase()\n            return String(value)\n        },\n        columns: true,\n        from_line: startAt > 0 ? startAt + 1 : 1,\n        trim: true,\n    })\n    if ((results ?? []).every((x: any) => _.difference(CoinBaseHeaderValues, _.sortBy(Object.keys(x))).length !== 0)) {\n        throw TypeError('All headers not found in the provided Coinbase file.')\n    }\n\n    return results.map((x: any) => ({\n        ...x, \"Source\": \"Coinbase\"\n    })) as CoinbaseHeaders[];\n}\n\nconst prepareCoinbaseForFIFO = (rawData: CoinbaseHeaders[]): Operation[] => {\n    const prepareRawFifo: CoinbaseHeaders[] = []\n    rawData.forEach(statement => {\n        if (statement.TransactionType === 'CONVERT') {\n            const info = statement.Notes.split(' ')\n            //const soldAmount = info[1]\n            //const soldCurrency = info[2]\n            const boughAmount = Number(info[4])\n            const boughtCurrency = info[5]\n            prepareRawFifo.push({\n                ...statement,\n                TransactionType: \"SELL\",\n                Fees: 0,\n                Total: statement.Total - statement.Fees\n            })\n            prepareRawFifo.push({\n                ...statement,\n                TransactionType: \"BUY\",\n                Asset: boughtCurrency,\n                QuantityTransacted: boughAmount,\n                SpotPriceatTransaction: statement.Subtotal / boughAmount\n            })\n        } else if (statement.TransactionType === 'COINBASE EARN') {\n            prepareRawFifo.push({\n                ...statement,\n                TransactionType: \"BUY\",\n            })\n        } else if (statement.TransactionType === 'RECEIVE') {\n            prepareRawFifo.push({\n                ...statement,\n                TransactionType: \"BUY\",\n            })\n        }\n\n    })\n\n    const dataFifo: Operation[] = rawData.concat(prepareRawFifo)\n        .filter(x => x.TransactionType === 'BUY' || x.TransactionType === 'SELL')\n        .map(record => {\n            return {\n                symbol: record.Asset,\n                date: new Date(record.Timestamp),\n                price: Number(record.SpotPriceatTransaction),\n                amount: Number(record.QuantityTransacted),\n                type: record.TransactionType as \"BUY\" | \"SELL\",\n                transactionFee: Number(record.Fees ?? 0),\n            }\n        })\n    return dataFifo\n\n}\n\n\nconst getCoinbaseAsColumns = (records: CoinbaseHeaders[]): ColumnDataCrypto[] => {\n    const ret = records.map(record => {\n        const value = `${record.Subtotal ?\n            Number(record.Subtotal).toFixed(2) :\n            (record.QuantityTransacted * record.SpotPriceatTransaction).toFixed(2)\n            } ${record.SpotPriceCurrency}`\n        return {\n            paivays: new Date(record.Timestamp).toLocaleString('en-GB', { timeZone: 'UTC' }),\n            tuote: record.Asset,\n            arvo: value,\n            maara: record.QuantityTransacted,\n            kulut: `${Number(record.Fees ?? 0).toFixed(2)} ${record.SpotPriceCurrency}`,\n            kurssi: `${record.SpotPriceatTransaction} ${record.SpotPriceCurrency}`,\n            kokonaissumma: `${Number(record.Total ? record.Total : 0).toFixed(2)} ${record.SpotPriceCurrency}`,\n            operaatio: record.TransactionType,\n        } as ColumnDataCrypto\n    })\n    return ret\n}\n\nconst parseCoinbaseProCSV = async (input: string): Promise<CoinbaseProHeaders[]> => {\n    const parse = await loadParser()\n    const tmp = parse(input, {\n        cast: (value: any, context: any) => {\n            if (context.header) {\n                if (value.includes('/')) return value.replace(/\\//g, '').replace(/\\s/g, '')\n                return value.replace(/\\s/g, '')\n            }\n            if (context.column === 'createdat') return new Date(value)\n            return String(value)\n        },\n        columns: true,\n        trim: true,\n    })\n\n    const results = []\n    for await (const record of tmp) results.push(record)\n\n\n    if (results.every(x => _.difference(_.sortBy(CoinBaseProHeaderValues), _.sortBy(Object.keys(x))).length !== 0)) {\n        throw TypeError('All headers not found in the provided Coinbase Pro file.')\n    }\n\n\n    return results.map((x: any) => ({\n        ...x, \n        Source: \"CoinbasePro\",\n        product: x.product.split('-')[0],\n        Error: (x.pricefeetotalunit !== \"EUR\" ? \"Invalid currency detected\" : undefined)\n    })) as CoinbaseProHeaders[]\n}\n\nconst getCoinbaseProAsColumns = (records: CoinbaseProHeaders[]): ColumnDataCrypto[] => {\n    const ret = records.map(record => {\n        return {\n            paivays: record.createdat.toLocaleString('en-GB', { timeZone: 'UTC' }),\n            tuote: record.product,\n            arvo: `${record.size * record.price} ${record.pricefeetotalunit}`,\n            maara: record.size,\n            kulut: `${Number(record.fee ?? 0).toFixed(2)} ${record.pricefeetotalunit}`,\n            kurssi: `${record.price} ${record.pricefeetotalunit}`,\n            kokonaissumma: `${Number(record.total ?? 0).toFixed(2)} ${record.pricefeetotalunit}`,\n            operaatio: record.side,\n        } as ColumnDataCrypto\n    })\n    return ret\n}\n\n\nconst prepareCoinbaseProForFIFO = (rawData: CoinbaseProHeaders[]): Operation[] => {\n    return rawData\n        .filter(x => x.side === 'BUY' || x.side === 'SELL')\n        .map(record => {\n            return {\n                symbol: record.product,\n                date: new Date(record.createdat),\n                price: Number(record.price),\n                amount: Number(record.size),\n                type: record.side as \"BUY\" | \"SELL\",\n                transactionFee: Number(record.fee),\n            }\n        })\n}\n\nexport {\n    parseCoinbaseCSV,\n    parseDegiroCSV,\n    parseNordNetCSV,\n    getDegiroAsColumns,\n    getCoinbaseAsColumns,\n    prepareCoinbaseForFIFO,\n    parseCoinbaseProCSV,\n    getCoinbaseProAsColumns,\n    prepareCoinbaseProForFIFO,\n    getNordnetAsColumns,\n    prepareNordnetForFIFO,\n    prepareDegiroForFIFO\n}\n","export interface ColumnSecurity {\r\n    id: 'paivays' | 'tuote' | 'isin' | 'maara' | 'arvo' | 'kulut' | 'kokonaissumma' | 'kurssi';\r\n    label: string;\r\n    minWidth?: number;\r\n    align?: 'right';\r\n    format?: (value: number) => string;\r\n}\r\n\r\nexport interface ColumnCrypto {\r\n    id: 'paivays' | 'tuote' | 'arvo' | 'maara' | 'arvo' | 'kulut' | 'kokonaissumma' | 'kurssi' | 'operaatio';\r\n    label: string;\r\n    minWidth?: number;\r\n    align?: 'right';\r\n    format?: (value: number) => string;\r\n}\r\n\r\nexport interface ColumnTransaction {\r\n    id: 'ticker' | 'buydate' | 'selldate' | 'amountsold' | 'transferPrice' | 'acquisitionPrice' | 'acquisitionFee' | 'transferFee' | 'profitOrLoss';\r\n    label: string;\r\n    minWidth?: number;\r\n    align?: 'right';\r\n    format?: (value: number) => string;\r\n}\r\n\r\n\r\nconst columnsTransaction: readonly ColumnTransaction[] = [\r\n    { id: 'ticker', label: 'Tuote', minWidth: 120 },\r\n    { id: 'buydate', label: 'Hankintapäivä', minWidth: 150 },\r\n    { id: 'selldate', label: 'Luovutuspäivä', minWidth: 150 },\r\n    {\r\n        id: 'amountsold', label: 'Myyty kpl', minWidth: 100,\r\n        format: (value: number) => value.toFixed(8)\r\n    },\r\n    { id: 'transferPrice', label: 'Luovutushinta', minWidth: 120 },\r\n    {\r\n        id: 'acquisitionPrice', label: 'Hankintahinta', minWidth: 100,\r\n        format: (value: number) => value.toFixed(2)\r\n    },\r\n    { id: 'acquisitionFee', label: 'Hankintakulut', minWidth: 100 },\r\n    { id: 'transferFee', label: 'Luovutuskulut', minWidth: 80 },\r\n    {\r\n        id: 'profitOrLoss', label: 'Voitto/Tappio', minWidth: 170,\r\n        format: (value: number) => value.toFixed(3)\r\n    },\r\n];\r\n\r\n\r\nconst columnsSecurity: readonly ColumnSecurity[] = [\r\n    { id: 'paivays', label: 'Paivays', minWidth: 150 },\r\n    { id: 'tuote', label: 'Tuote', minWidth: 200 },\r\n    { id: 'isin', label: 'ISIN', minWidth: 170 },\r\n    {\r\n        id: 'maara', label: 'Maara', minWidth: 100,\r\n        format: (value: number) => value.toFixed(2)\r\n    },\r\n    { id: 'kurssi', label: 'Kurssi', minWidth: 120 },\r\n    { id: 'arvo', label: 'Arvo', minWidth: 100 },\r\n    { id: 'kulut', label: 'Kulut', minWidth: 100 },\r\n    { id: 'kokonaissumma', label: 'Kokonaissumma', minWidth: 170 },\r\n];\r\n\r\nconst columnsCrypto: readonly ColumnCrypto[] = [\r\n    { id: 'paivays', label: 'Paivays', minWidth: 150 },\r\n    { id: 'operaatio', label: 'Operaatio', minWidth: 100 },\r\n    { id: 'tuote', label: 'Tuote', minWidth: 100 },\r\n    { id: 'arvo', label: 'Arvo', minWidth: 100 },\r\n    {\r\n        id: 'maara', label: 'Määrä', minWidth: 100,\r\n        format: (value: number) => value.toFixed(2)\r\n    },\r\n    { id: 'kurssi', label: 'Kurssi', minWidth: 120 },\r\n    {\r\n        id: 'kulut', label: 'Kulut', minWidth: 110,\r\n        format: (value: number) => value.toFixed(4)\r\n    },\r\n    { id: 'kokonaissumma', label: 'Kokonaissumma', minWidth: 170 },\r\n];\r\n\r\n\r\nexport interface ColumnDataSecurity {\r\n    paivays: string;\r\n    tuote: string;\r\n    isin: string;\r\n    arvo: string;\r\n    maara: number;\r\n    kulut: number;\r\n    kurssi: string;\r\n    kokonaissumma: string;\r\n}\r\n\r\n\r\nexport interface ColumnDataCrypto {\r\n    paivays: string;\r\n    operation: string;\r\n    tuote: string;\r\n    arvo: string;\r\n    maara: number;\r\n    kulut: string;\r\n    kurssi: string;\r\n    kokonaissumma: string;\r\n    operaatio: string;\r\n}\r\n\r\n\r\nexport interface ColumnDataTransaction {\r\n    ticker: string\r\n    buydate: string\r\n    selldate: string\r\n    amountsold: number\r\n    transferPrice: number\r\n    acquisitionPrice: number\r\n    acquisitionFee: number\r\n    transferFee: string\r\n    profitOrLoss: string\r\n}\r\n\r\n\r\n\r\nexport { columnsSecurity, columnsCrypto, columnsTransaction }\r\n","import { ChangeEvent, useEffect, useState } from 'react'\r\nimport { Paper, Stack, styled, Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow } from '@mui/material';\r\nimport { ColumnCrypto, ColumnDataCrypto, ColumnDataSecurity, columnsCrypto, ColumnSecurity, columnsSecurity, columnsTransaction, ColumnTransaction, ColumnDataTransaction } from './tableSettings'\r\ninterface Props {\r\n    rows: ColumnDataSecurity[] | ColumnDataCrypto[] | ColumnDataTransaction[],\r\n    mode: \"CRYPTO\" | \"SECURITY\" | 'RESULT',\r\n}\r\n\r\n\r\nconst ResultTable = ({ rows, mode }: Props) => {\r\n\r\n    // Table specific states\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(10);\r\n\r\n    let columns: readonly ColumnSecurity[] | readonly ColumnCrypto[] | readonly ColumnTransaction[] = []\r\n    if (mode === \"SECURITY\") {\r\n        columns = columnsSecurity\r\n    } else if (mode === \"CRYPTO\") {\r\n        columns = columnsCrypto\r\n    } else if (mode === \"RESULT\") {\r\n        columns = columnsTransaction\r\n    }\r\n\r\n    const handleChangePage = (event: unknown, newPage: number) => {\r\n        setPage(newPage);\r\n    };\r\n    const handleChangeRowsPerPage = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 250)\r\n    }, [])\r\n\r\n    return (<><Paper sx={{ width: '100%', overflow: 'hidden' }}>\r\n        <TableContainer sx={{ maxHeight: 1400 }}>\r\n            <Table stickyHeader aria-label=\"sticky table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {columns.map((column) => (\r\n                            <TableCell\r\n                                key={column.id}\r\n                                align={column.align}\r\n                                style={{ minWidth: column.minWidth }}\r\n                            >\r\n                                {column.label}\r\n                            </TableCell>\r\n                        ))}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {rows\r\n                        .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                        .map((row, index) => {\r\n                            return (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1} key={index}>\r\n                                    {columns.map((column) => {\r\n                                        const value = (row as any)[column.id]\r\n                                        return (\r\n                                            <TableCell key={column.id} align={column.align}>\r\n                                                {column.format && typeof value === 'number'\r\n                                                    ? column.format(value)\r\n                                                    : value}\r\n                                            </TableCell>\r\n                                        );\r\n                                    })}\r\n                                </TableRow>\r\n                            );\r\n                        })}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n            rowsPerPageOptions={[10, 25, 100]}\r\n            component=\"div\"\r\n            count={rows.length}\r\n            rowsPerPage={rowsPerPage}\r\n            page={page}\r\n            onPageChange={handleChangePage}\r\n            onRowsPerPageChange={handleChangeRowsPerPage}\r\n        />\r\n    </Paper>\r\n    </>)\r\n}\r\n\r\nexport { ResultTable }\r\n","\r\nimport { Alert, Box, Button, createTheme, Paper, Stack, styled, Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow, ThemeProvider } from '@mui/material';\r\n\r\ninterface Props {\r\n    header: string,\r\n    content: string,\r\n    contentColor: string,\r\n    footer: string,\r\n    footerSecondary: string,\r\n}\r\n\r\n\r\nconst ResultCard = ({ header, content, footer, footerSecondary, contentColor }: Props) => {\r\n    const theme = createTheme({\r\n        typography: {\r\n            fontSize: 14,\r\n        },\r\n        palette: {\r\n            background: {\r\n                paper: '#fff',\r\n            },\r\n            text: {\r\n                primary: '#173A5E',\r\n                secondary: '#46505A',\r\n            },\r\n            action: {\r\n                active: '#001E3C',\r\n            }\r\n        }\r\n    });\r\n    return (\r\n        <ThemeProvider theme={theme}><Box\r\n            sx={{\r\n                bgcolor: 'background.paper',\r\n                boxShadow: 1,\r\n                borderRadius: 1,\r\n                p: 2,\r\n                minWidth: 350,\r\n            }}\r\n        >\r\n            <Box sx={{ color: 'text.secondary' }}>{header}</Box>\r\n            <Box sx={{ color: 'text.primary', fontSize: 30, fontWeight: 'medium' }}>\r\n                {content}\r\n            </Box>\r\n            <Box\r\n                sx={{\r\n                    color: Number(content) > 0 ? 'success.light' : 'error.light',\r\n                    display: 'inline',\r\n                    fontWeight: 'medium',\r\n                    mx: 0.5,\r\n                }}\r\n            >\r\n                {footer}\r\n            </Box>\r\n            <Box sx={{ color: 'text.secondary', display: 'inline', fontSize: 12 }}>\r\n                {footerSecondary}\r\n            </Box>\r\n        </Box>\r\n        </ThemeProvider>)\r\n}\r\n\r\nexport { ResultCard }","import { Operation, Transaction } from './types';\nimport _ from 'lodash';\n\nexport interface CapitalResults {\n  /**\n   * Sale that triggered the capital gains\n   */\n  transactions: Transaction[]\n\n  /**\n   * Capital gains triggered from the sale\n   */\n  capitalGainPerSellDate: number\n}\n\n/**\n * Calculates the FIFO capital gains for the given operation history.\n * It separates capital gains of securities using the symbols given\n * in each operation.\n *\n * @param operationHistory History of operations (buy and sales) to\n * calculate the capital gains for.\n *\n * @throws If the amount of securities of all sell operations of a given symbol\n * exceeds the amount of securities of all buy operations for the same symbol.\n * This indicates that there is an error in the input, since it is not possible\n * to sell more securities than the ones bought.\n *\n * @returns The FIFO capital gains with details of the transaction details\n * for each sell operation\n *\n * [\n    {\n        \"capitalGainPerSellDate\": -315.6,\n        \"transactions\": [\n            {\n                \"ticker\": \"GME\",\n                \"buydate\": \"2019-02-01T00:00:00.000Z\",\n                \"selldate\": \"2020-03-01T00:00:00.000Z\",\n                \"amountsold\": 3,\n                \"transferPrice\": 50,\n                \"profitOrLoss\": -300,\n                \"acquisitionPrice\": 150,\n                \"acquisitionFee\": 4.2,\n                \"transferFee\": 4.1\n            },\n            {\n                \"ticker\": \"GME\",\n                \"buydate\": \"2020-01-01T00:00:00.000Z\",\n                \"selldate\": \"2020-03-01T00:00:00.000Z\",\n                \"amountsold\": 1,\n                \"transferPrice\": 50,\n                \"profitOrLoss\": 0,\n                \"acquisitionPrice\": 50,\n                \"acquisitionFee\": 3.2,\n                \"transferFee\": 4.1\n            }\n        ]\n    },\n    {\n        \"capitalGainPerSellDate\": 97.7,\n        \"transactions\": [\n            {\n                \"ticker\": \"GME\",\n                \"buydate\": \"2020-01-01T00:00:00.000Z\",\n                \"selldate\": \"2020-04-01T00:00:00.000Z\",\n                \"amountsold\": 3,\n                \"transferPrice\": 86,\n                \"profitOrLoss\": 108,\n                \"acquisitionPrice\": 50,\n                \"acquisitionFee\": 3.2,\n                \"transferFee\": 7.1\n            }\n        ]\n    },\n    {\n        \"capitalGainPerSellDate\": 995.6999999999999,\n        \"transactions\": [\n            {\n                \"ticker\": \"BB\",\n                \"buydate\": \"2020-02-01T00:00:00.000Z\",\n                \"selldate\": \"2021-01-01T00:00:00.000Z\",\n                \"amountsold\": 10,\n                \"transferPrice\": 150,\n                \"profitOrLoss\": 1000,\n                \"acquisitionPrice\": 50,\n                \"acquisitionFee\": 2.2,\n                \"transferFee\": 2.1\n            }\n        ]\n    }\n]\n */\nexport function calculateFIFOCapitalGains(\n  operationHistory: Operation[]\n): CapitalResults[] {\n  const history = operationHistory.map((obj) => ({ ...obj }));\n  const sales = history.filter(({ type }) => type === 'SELL');\n\n  return sales.reduce<CapitalResults[]>(\n    (capitalGainPerSellDate, sale) => [\n      ...capitalGainPerSellDate,\n      calculateCapitalGainsForSale(history, sale),\n    ],\n    []\n  );\n}\n\n/**\n * Calculates the FIFO capital gains for the given operation history. \n * Transfer fees are divided between SELL operations, so the end resulting\n * SELL batch trasnferprice for the bought asset remains the same.\n *\n * @param operationHistory History of operations (buy and sales) to\n * calculate the capital gains for. \n *\n * @returns The FIFO transaction details by every sold security\n * example\n *  {\n        ticker: 'GME',\n        buydate: 2020-01-01T00:00:00.000Z,\n        selldate: 2020-04-01T00:00:00.000Z,\n        amountsold: 3,\n        transferPrice: 86,\n        profitOrLoss: 108,\n        acquisitionPrice: 50,\n        acquisitionFee: 3.2,\n        transferFee: 7.1\n      },\n      {\n        ticker: 'BB',\n        buydate: 2020-02-01T00:00:00.000Z,\n        selldate: 2021-01-01T00:00:00.000Z,\n        amountsold: 10,\n        transferPrice: 150,\n        profitOrLoss: 1000,\n        acquisitionPrice: 50,\n        acquisitionFee: 2.2,\n        transferFee: 2.1\n      }\n *\n */\nexport const calculateFIFOTransactions = (operationHistory: Operation[]): Transaction[] => {\n  const a = calculateFIFOCapitalGains(operationHistory).flatMap((gainByDate) => {\n    const totalAmount = _.sumBy(gainByDate.transactions, (o) => o.amountsold)\n    const dividedFees = gainByDate.transactions.map(x => ({\n      ...x,\n      transferFee: (x.amountsold / totalAmount) * x.transferFee\n    }))\n    const transferFeeForSell = gainByDate.transactions[0] ? gainByDate.transactions[0].transferFee : 0\n    const transferFeeSummedFromSELLOperation = _.sumBy(dividedFees, (o) => o.transferFee)\n    if (transferFeeForSell !== transferFeeSummedFromSELLOperation) {\n      console.error(`Amount of fees for do not match for ${gainByDate.transactions[0]?.ticker}: ${transferFeeForSell} and ${transferFeeSummedFromSELLOperation}`)\n    }\n    return dividedFees\n  });\n  return a\n}\n\n\nconst calculateCapitalGainsForSale = (\n  operationHistory: Operation[],\n  sale: Operation\n): CapitalResults => {\n  let capitalGainPerSellDate = 0;\n  const transactions: Transaction[] = [];\n\n  const relatedBuyTransactions = operationHistory.filter(\n    ({ type, symbol, date }) =>\n      type === 'BUY' && symbol === sale.symbol && date < sale.date\n  );\n\n  // Order the result set in ASC order so the oldest buy operations are handled first\n  _.orderBy(relatedBuyTransactions, (o: Operation) => o.date, 'asc').forEach(\n    (buy) => {\n      const amountSold = Math.min(sale.amount, buy.amount);\n      // if the total amount of held shares have not yet been sold\n      if (amountSold === 0) return;\n      const trs: Transaction = {\n        ticker: sale.symbol,\n        buydate: buy.date,\n        selldate: sale.date,\n        amountsold: amountSold,\n        transferPrice: sale.price,\n        profitOrLoss: amountSold * (sale.price - buy.price),\n        acquisitionPrice: buy.price,\n        acquisitionFee: buy.transactionFee,\n        transferFee: sale.transactionFee,\n      };\n      transactions.push(trs);\n\n      buy.amount -= amountSold;\n      sale.amount -= amountSold;\n      // We reduce the transactionsfees from the capital gain\n      const totalPrice =\n        amountSold * (sale.price - buy.price)\n      capitalGainPerSellDate += totalPrice;\n    }\n  );\n  // TODO: removee nii perkeleesti ja implementoi uudestaan paremmin\n  //if (Number(sale.amount ?  sale.amount.toFixed(6) : 0) > 0) {\n  if (Math.round(sale.amount) > 0) {\n    throw Error(\n      `Amount of sales for ticker ${sale.symbol} exceeds the amount of buys by ${sale.amount}. In transaction made in ${new Date(sale.date)\n        .toLocaleString('en-GB', { timeZone: 'UTC' })}`\n    );\n  }\n\n  return {\n    capitalGainPerSellDate,\n    transactions: transactions,\n  };\n};\n","import { ChangeEvent, Fragment, useEffect, useState } from 'react'\r\nimport _ from 'lodash';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport GlobalStyles from '@mui/material/GlobalStyles';\r\nimport Container from '@mui/material/Container';\r\nimport Typography from '@mui/material/Typography';\r\nimport { Alert, Box, Button, createTheme, Paper, Stack, styled, Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow, ThemeProvider } from '@mui/material';\r\nimport { Dropzone } from './Dropzone';\r\nimport { FileObject } from 'react-mui-dropzone';\r\nimport { Copyright } from './Copyright';\r\nimport { parseDegiroCSV, getDegiroAsColumns, parseCoinbaseProCSV, parseCoinbaseCSV, parseNordNetCSV, prepareCoinbaseForFIFO, getCoinbaseAsColumns, getCoinbaseProAsColumns, prepareCoinbaseProForFIFO, getNordnetAsColumns, prepareDegiroForFIFO, prepareNordnetForFIFO } from '../utils/parsers/loadTransactions'\r\nimport { CoinbaseHeaders, CoinbaseProHeaders, DegiroHeaders, NordnetHeaders } from '../utils/parsers/types';\r\nimport { ResultTable } from './ResultTable'\r\nimport { ResultCard } from './ResultCard'\r\nimport { ColumnDataCrypto, ColumnDataSecurity, ColumnDataTransaction, columnsCrypto } from './tableSettings';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport ArrowDownwardIcon from '@mui/icons-material/ArrowDownward';\r\nimport { calculateFIFOTransactions } from '../utils/fifo'\r\nimport { Operation, Transaction } from '../utils/fifo/types'\r\nimport { chooseCSVParser } from '../utils/parsers/helpers'\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\n\r\nconst parsersCrypto = [parseCoinbaseCSV, parseCoinbaseProCSV]\r\nconst parsersSecurity = [parseDegiroCSV, parseNordNetCSV]\r\n\r\ninterface rawDatas {\r\n    Coinbase: CoinbaseHeaders[]\r\n    CoinbasePro: CoinbaseProHeaders[]\r\n    Degiro: DegiroHeaders[]\r\n    Nordnet: NordnetHeaders[]\r\n}\r\n\r\ninterface calculatedResultsType {\r\n    capitalGains: number,\r\n    capitalLosses: number,\r\n    transactionTotal: number,\r\n    netProfit: number\r\n}\r\n\r\n\r\ninterface Props {\r\n    mode: \"CRYPTO\" | \"SECURITY\"\r\n}\r\n\r\nconst PreviewData = ({ mode }: Props) => {\r\n    const [zoneHeight, setZoneHeight] = useState(400);\r\n    const [files, setFiles] = useState<FileObject[]>([]);\r\n    const [showTable, setShowTable] = useState(false)\r\n    const [rows, setRows] = useState<ColumnDataCrypto[] | ColumnDataSecurity[]>([]);\r\n    const [rawData, setRawData] = useState<rawDatas>({} as rawDatas);\r\n    const [results, setResults] = useState<ColumnDataTransaction[]>([]);\r\n    const [parseError, setParseError] = useState(\"\")\r\n    const [errorFifo, setErrorFifo] = useState(\"\")\r\n    const [showCurrencyFetchButton, setShowCurrencyFetchButton] = useState(false)\r\n    const [calculatedResults, setCalculatedResults] = useState({} as calculatedResultsType);\r\n    const fileCallback = (file: FileObject[]) => setFiles([...files, ...file])\r\n    const theme = createTheme({\r\n        typography: {\r\n            fontSize: 14,\r\n        }\r\n    });\r\n\r\n    const clearRows = () => {\r\n        setFiles([])\r\n        setRows([])\r\n        setRawData({} as rawDatas)\r\n        setShowTable(false)\r\n        setZoneHeight(400)\r\n        setResults([])\r\n    }\r\n\r\n    const calculateFIFO = () => {\r\n        const fifoData: Operation[] = []\r\n        try {\r\n            if (rawData?.Coinbase) {\r\n                fifoData.push(...prepareCoinbaseForFIFO(rawData.Coinbase as CoinbaseHeaders[]))\r\n            }\r\n            if (rawData?.CoinbasePro) {\r\n                fifoData.push(...prepareCoinbaseProForFIFO(rawData.CoinbasePro as CoinbaseProHeaders[]))\r\n            }\r\n            if (rawData?.Degiro) {\r\n                fifoData.push(...prepareDegiroForFIFO(rawData.Degiro as DegiroHeaders[]))\r\n            }\r\n            if (rawData?.Nordnet) {\r\n                fifoData.push(...prepareNordnetForFIFO(rawData.Nordnet as NordnetHeaders[]))\r\n            }\r\n            const finalFifo = calculateFIFOTransactions(fifoData)\r\n            setResults(_.sortBy(finalFifo, (o) => o.selldate).map(x => ({\r\n                ...x,\r\n                buydate: new Date(x.buydate).toISOString().substring(0, 16),\r\n                selldate: new Date(x.selldate).toISOString().substring(0, 16),\r\n                transferFee: `${Number(x.transferFee).toFixed(4)} EUR`,\r\n                profitOrLoss: `${x.profitOrLoss.toFixed(3)} EUR`,\r\n            })))\r\n\r\n\r\n            setCalculatedResults({\r\n                capitalGains: _.sumBy(finalFifo, (o) => o.profitOrLoss > 0 ? o.profitOrLoss : 0),\r\n                capitalLosses: _.sumBy(finalFifo, (o) => o.profitOrLoss < 0 ? o.profitOrLoss : 0),\r\n                transactionTotal: _.sumBy(finalFifo, (o) => Math.abs(o.transferFee) + Math.abs(o.acquisitionFee)),\r\n                netProfit: _.sumBy(finalFifo, (o) => o.profitOrLoss - (Math.abs(o.transferFee) + Math.abs(o.acquisitionFee)))\r\n            })\r\n\r\n\r\n        } catch (e: any) {\r\n            setErrorFifo(e.message)\r\n        }\r\n    }\r\n\r\n    const createColumnsFromRaw = (newRawData: rawDatas) => {\r\n        const columnData: any = []\r\n        Object.keys(newRawData).forEach((header) => {\r\n            if (header === 'Coinbase') {\r\n                columnData.push(getCoinbaseAsColumns(newRawData.Coinbase as CoinbaseHeaders[]) as ColumnDataCrypto[])\r\n            } else if (header === 'CoinbasePro') {\r\n                const currencyError = newRawData.CoinbasePro.find(x => x?.Error === \"Invalid currency detected\")\r\n                if (currencyError)\r\n                    setParseError(`${currencyError.Error} In trancactions made in ${currencyError\r\n                        .createdat.toLocaleString('en-GB', { timeZone: 'UTC' })}.`)\r\n                columnData.push(getCoinbaseProAsColumns(newRawData.CoinbasePro as CoinbaseProHeaders[]) as ColumnDataCrypto[])\r\n            } else if (header === 'Degiro') {\r\n                columnData.push(getDegiroAsColumns(newRawData.Degiro as DegiroHeaders[]) as ColumnDataSecurity[])\r\n            } else if (header === 'Nordnet') {\r\n                columnData.push(getNordnetAsColumns(newRawData.Nordnet as NordnetHeaders[]) as ColumnDataSecurity[])\r\n            }\r\n        })\r\n        setRows(_.flatten(columnData) as ColumnDataCrypto[] | ColumnDataSecurity[])\r\n        setZoneHeight(200)\r\n        setShowTable(true)\r\n    }\r\n\r\n    const currencyClick = () => {\r\n        (async () => {\r\n            const fixedCurrencies = await Promise.all(rawData.CoinbasePro.map(async x => {\r\n                const requestDate = moment(x.createdat).format('YYYY-MM-DD');\r\n                const unitAsEur = (await (await axios.get(`https://api.coinbase.com/v2/prices/${x.sizeunit}-EUR/spot?date=${requestDate}`)).data.data)?.amount\r\n                const percentageOfFee = x.fee / x.total\r\n                const totalInEur = unitAsEur * x.size\r\n                const totalFee = totalInEur * percentageOfFee\r\n                return {\r\n                    ...x,\r\n                    pricefeetotalunit: \"EUR\",\r\n                    price: unitAsEur,\r\n                    fee: totalFee,\r\n                    total: totalInEur - totalFee,\r\n                    Error: undefined\r\n                }\r\n            })) as CoinbaseProHeaders[]\r\n            const newRawData = {\r\n                ...rawData,\r\n                CoinbasePro: fixedCurrencies\r\n            }\r\n            setRawData(newRawData)\r\n            createColumnsFromRaw(newRawData)\r\n            setShowCurrencyFetchButton(false)\r\n            setParseError(\"\")\r\n        })()\r\n    }\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            if (files.length > 0) {\r\n                const data = await chooseCSVParser(files, mode === \"CRYPTO\" ? parsersCrypto : parsersSecurity)\r\n                const dataSource = data[0]?.Source\r\n                if (dataSource === 'Error') {\r\n                    const msg = data[0]['Error'].message\r\n                    if (msg === \"malformed URI sequence\") {\r\n                        setParseError(\"Unable to parse file, is it encoded in a weird format?\")\r\n                    } else {\r\n                        setParseError(data[0]['Error'].message)\r\n                    }\r\n                } else {\r\n                    createColumnsFromRaw({\r\n                        ...rawData,\r\n                        [dataSource]: data\r\n                    })\r\n                    setRawData({\r\n                        ...rawData,\r\n                        [dataSource]: data\r\n                    })\r\n                }\r\n\r\n                setFiles([])\r\n            }\r\n        })()\r\n    }, [files])\r\n\r\n    useEffect(() => {\r\n        //console.log(\"rows parsed into rawdata\", rawData)\r\n    }, [rawData])\r\n\r\n\r\n    useEffect(() => {\r\n        if (parseError.includes(\"In trancactions made in\")) {\r\n            setShowCurrencyFetchButton(true)\r\n        }\r\n    }, [parseError])\r\n\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <GlobalStyles styles={{ ul: { margin: 0, padding: 0, listStyle: 'none' } }} />\r\n            <CssBaseline />\r\n            <Container component=\"main\" sx={{ pt: 8, pb: 4 }}>\r\n                <Stack\r\n                    direction=\"column\"\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"center\"\r\n                    spacing={3}\r\n                    width=\"sm\"\r\n\r\n                >\r\n                    <Typography\r\n                        component=\"h1\"\r\n                        variant=\"h3\"\r\n                        align=\"center\"\r\n                        color=\"text.primary\"\r\n                        gutterBottom\r\n                        sx={{ fontWeight: 'bold', pt: 8 }}\r\n                    >\r\n                        VEROTUNKKI\r\n                    </Typography>\r\n                    <Typography alignSelf=\"center\" align=\"center\" variant=\"h6\" sx={{ pt: 0 }} component=\"p\">\r\n                        {mode === 'CRYPTO' ? \"Virtuaalivaluutat\" : \"Arvopaperit\"}\r\n                    </Typography>\r\n                    {parseError && <Alert severity=\"error\">{parseError}</Alert>}\r\n                    {results.length === 0 && <Dropzone zoneHeight={zoneHeight} handleFiles={fileCallback} />}\r\n                    {results.length > 0 &&\r\n                        <Stack direction=\"column\" alignItems=\"center\" justifyContent=\"center\" spacing={2} sx={{ pb: 4 }}>\r\n                            <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"center\" spacing={2}>\r\n                                <ResultCard header=\"Gross Capital Gain\"\r\n                                    content={calculatedResults.capitalGains.toFixed(2)}\r\n                                    footer=\"Gains\" footerSecondary=\"before losses and fees\"\r\n                                    contentColor=\"success.light\"\r\n                                />\r\n                                <ResultCard header=\"Gross Capital Loss\"\r\n                                    content={calculatedResults.capitalLosses.toFixed(2)}\r\n                                    footer=\"Losses\"\r\n                                    footerSecondary=\"before gains and fees\"\r\n                                    contentColor=\"error.light\"\r\n                                />\r\n                            </Stack>\r\n                            <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"center\" spacing={2}>\r\n                                <ResultCard header=\"Transaction Fees\"\r\n                                    content={calculatedResults.transactionTotal.toFixed(2)}\r\n                                    footer=\"Fees\" footerSecondary=\"acquisition and transfer Fees\"\r\n                                    contentColor=\"error.light\"\r\n                                />\r\n                                <ResultCard header=\"Net Capital Gain\"\r\n                                    content={calculatedResults.netProfit.toFixed(2)}\r\n                                    footer=\"Total\"\r\n                                    footerSecondary=\"Gains with fees and losses\"\r\n                                    contentColor={calculatedResults.netProfit > 0 ? 'success.light' : 'error.light'}\r\n                                />\r\n                            </Stack>\r\n                        </Stack>}\r\n                    <Typography alignSelf=\"flex-start\" sx={{ pl: 4 }} component=\"p\">\r\n                        {mode === 'CRYPTO' ? \"Tuetut lähteet: Coinbase, Coinbase Pro\" : \"Tuetut lähteet: Nordnet, Degiro\"}\r\n                    </Typography>\r\n                    {errorFifo && <Alert severity=\"error\">{errorFifo}</Alert>}\r\n                    {showCurrencyFetchButton && <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"center\" spacing={2}>\r\n                        <Alert severity=\"warning\" >\r\n                            You have made transactions that have not been traded in EUR. Do you want to use an external API to fetch the currency info? EXPERIMENTAL!\r\n                        </Alert>\r\n                        <Button variant=\"contained\" onClick={currencyClick} endIcon={<ArrowDownwardIcon />} >Fetch</Button>\r\n                    </Stack>}\r\n\r\n                    {showTable && !showCurrencyFetchButton && <Stack direction=\"row\" spacing={2}>\r\n                        <Button variant=\"outlined\" onClick={clearRows} startIcon={<DeleteIcon />}>\r\n                            Poistha\r\n                        </Button>\r\n                        <Button disabled={results.length > 0} onClick={calculateFIFO} variant=\"contained\" endIcon={<SendIcon />}>\r\n                            Laske\r\n                        </Button>\r\n                    </Stack>}\r\n                    {(showTable && results.length === 0) && <ResultTable mode={mode} rows={rows} />}\r\n                    {results.length > 0 && <ResultTable mode=\"RESULT\" rows={results} />}\r\n                </Stack>\r\n                <Copyright />\r\n            </Container>\r\n        </ThemeProvider>\r\n    );\r\n}\r\n\r\nexport { PreviewData }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Frontpage } from './components/Frontpage'\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\nimport { PreviewData } from './components/PreviewData'\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Routes>\n      <Route path=\"/\" element={<Frontpage />} />\n      <Route path=\"securities\" element={<PreviewData mode=\"SECURITY\" />} />\n      <Route path=\"crypto\" element={<PreviewData mode=\"CRYPTO\" />} />\n    </Routes>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}