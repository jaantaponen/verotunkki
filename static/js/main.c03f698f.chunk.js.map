{"version":3,"sources":["components/Copyright.tsx","components/Frontpage.tsx","components/Dropzone.tsx","utils/parsers/translations.ts","utils/parsers/types.ts","utils/parsers/helpers.ts","utils/parsers/loadTransactions.ts","components/tableSettings.tsx","components/ResultTable.tsx","components/ResultCard.tsx","utils/fifo/fifo.ts","components/PreviewTable.tsx","components/PreviewData.tsx","index.tsx"],"names":["Copyright","Stack","direction","justifyContent","alignItems","spacing","width","sx","pt","Typography","alignSelf","align","component","variant","color","Link","href","Date","getFullYear","FrontPageContent","navigate","useNavigate","theme","createTheme","typography","fontSize","ThemeProvider","GlobalStyles","styles","ul","margin","padding","listStyle","CssBaseline","Container","maxWidth","pb","gutterBottom","fontWeight","Card","onClick","CardActionArea","CardContent","Dropzone","zoneHeight","handleFiles","paddingTop","height","acceptedFiles","onAdd","onDelete","fileObj","console","log","onAlert","message","Icon","UploadFileIcon","dropzoneText","fileObjects","degiroFiToEn","translateDegiro","key","CoinBaseProHeaderValues","CoinBaseHeaderValues","DegiroHeaderValues","NordnetHeaderValues","decodeUTF16LE","binaryStr","cp","i","length","push","charCodeAt","String","fromCharCode","chooseCSVParser","filesCopy","parsers","a","errors","inputFile","data","toString","split","fileContentBuffer","name","atob","str","decodeURIComponent","escape","window","fileContent","parsedData","Source","Error","find","e","TypeError","loadParser","parse","getDataDegiro","input","parseDegiroCSV","orig","column","getDegiroAsColumns","Degiro","rows","getDataNordnet","parseNordnetCSV","getNordnetAsColumns","Nordnet","getDataCoinbase","parseCoinbaseCSV","getCoinbaseAsColumns","Coinbase","getDataCoinbasePro","parseCoinbaseProCSV","getCoinbaseProAsColumns","CoinbasePro","prevField","tmp","cast","value","context","header","columns","trim","results","record","records","map","transaction","moment","date","time","toISOString","every","x","_","difference","sortBy","Object","keys","Promise","all","nanoid","id","paivays","datetime","tuote","security","isin","ISIN","arvo","valueCurrency","maara","quantity","kulut","transactionCosts","kurssi","rate","rateCurrency","kokonaissumma","totalAmount","totalAmountCurrency","operation","delimiter","includes","replace","Number","parseFloat","toDate","Kauppapaiva","Arvopaperi","Summa","Valuutta","Maara","Kokonaiskulut","Kurssi","Tapahtumatyyppi","startAt","findIndex","o","startsWith","tz","toUpperCase","from_line","Subtotal","QuantityTransacted","SpotPriceatTransaction","SpotPriceCurrency","Timestamp","Asset","Fees","Total","TransactionType","product","pricefeetotalunit","undefined","createdat","size","price","fee","total","side","columnsSecurity","field","headerName","type","editable","minWidth","columnsCrypto","columnsTransaction","CustomToolbar","className","gridClasses","toolbarContainer","ResultTable","style","minHeight","components","Toolbar","ResultCard","content","footer","footerSecondary","contentColor","palette","background","paper","text","primary","secondary","action","active","Box","bgcolor","boxShadow","borderRadius","p","display","mx","calculateFIFOTransactions","operationHistory","history","obj","filter","reduce","capitalGainPerSellDate","sale","calculateCapitalGainsForSale","calculateFIFOCapitalGains","flatMap","gainByDate","sumBy","transactions","amountsold","dividedFees","transferFee","transferFeeForSell","transferFeeSummedFromSELLOperation","error","ticker","orderBy","symbol","forEach","buy","amountSold","Math","min","amount","trs","buydate","selldate","transferPrice","profitOrLoss","acquisitionPrice","acquisitionFee","transactionFee","totalPrice","round","toLocaleString","timeZone","PreviewTable","mode","rawDataAsColumns","rawDatatSetCallback","useState","cellCommit","setCellCommit","useEffect","row","matchingRow","y","newObj","arr","item","fontVariantNumeric","onCellEditCommit","newSelection","parsersCrypto","parsersSecurity","PreviewData","setZoneHeight","files","setFiles","showTable","setShowTable","rowDataColumn","setRowDataColumn","setRawDataAsColumns","originalData","setOriginalData","setResults","parseError","setParseError","errorFifo","setErrorFifo","showCurrencyFetchButton","setShowCurrencyFetchButton","calculatedResults","setCalculatedResults","msg","original","rawKeys","dataSource","concat","enableCurrencyWarning","invalid","Alert","severity","file","capitalGains","toFixed","capitalLosses","transactionTotal","netProfit","pl","Button","additionlOperationTobeAdded","fixedCurrencies","requestDate","format","axios","get","unitAsEur","percentageOfFee","totalInEur","totalFee","arrReplacedObj","endIcon","startIcon","disabled","coinBaseIssueRows","customOp","coinbaseTMP","issueRow","matchinOrigData","info","Notes","boughAmount","boughtCurrency","correctedCoinbaseData","fifoData","abs","finalFifo","idx","newRawData","ReactDOM","render","basename","process","path","element","document","getElementById"],"mappings":"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","file":"static/js/main.c03f698f.chunk.js","sourcesContent":["import Link from '@mui/material/Link';\r\nimport Typography from '@mui/material/Typography';\r\nimport { Stack} from '@mui/material';\r\n\r\nconst Copyright = () => {\r\n    return (\r\n        <Stack\r\n            direction=\"column\"\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n            spacing={1}\r\n            width={\"sm\"}\r\n            sx={{ pt: 2 }}\r\n        >\r\n            <Typography alignSelf=\"center\" align=\"center\" component=\"p\" sx={{ pt: 4 }}>\r\n                Tarkista tiedot aina itse virheiden varalta.\r\n            </Typography>\r\n            <Typography alignSelf=\"center\" align=\"center\" component=\"p\" sx={{ pt: 0 }}>\r\n                Olet itse vastuussa omista veroistasi.\r\n            </Typography>\r\n            <Typography alignSelf=\"center\" align=\"center\" component=\"p\" sx={{ pt: 0 }}>\r\n                Sivustolle lähettämiäsi tiedostoja käsitellään vain paikallisesti selaimessasi.\r\n            </Typography>\r\n            <Typography variant=\"body2\" sx={{ pt: 2 }} color=\"text.secondary\" align=\"center\" >\r\n                {'Copyright © '}\r\n                <Link color=\"inherit\" href=\"https://verotunkki.fi/\">\r\n                    Verotunkki\r\n                </Link>{' '}\r\n                {new Date().getFullYear()}\r\n                {'.'}\r\n            </Typography>\r\n        </Stack>\r\n    );\r\n}\r\n\r\nexport { Copyright }\r\n","import { Fragment } from 'react'\r\n\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport Grid from '@mui/material/Grid';\r\nimport Link from '@mui/material/Link';\r\nimport GlobalStyles from '@mui/material/GlobalStyles';\r\nimport Container from '@mui/material/Container';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport CardMedia from '@mui/material/CardMedia';\r\nimport { Copyright } from './Copyright'\r\nimport Typography from '@mui/material/Typography';\r\nimport { CardActionArea, createTheme, Paper, Stack, styled, ThemeProvider } from '@mui/material';\r\n\r\nconst FrontPageContent = () => {\r\n    const navigate = useNavigate();\r\n    const theme = createTheme({\r\n        typography: {\r\n            fontSize: 14,\r\n        },\r\n    });\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <GlobalStyles styles={{ ul: { margin: 0, padding: 0, listStyle: 'none' } }} />\r\n            <CssBaseline />\r\n            <Container component=\"main\" maxWidth=\"sm\" sx={{ pt: 8, pb: 4 }}>\r\n                <Stack\r\n                    direction=\"column\"\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"center\"\r\n                    spacing={6}\r\n                    width=\"sm\"\r\n\r\n                >\r\n                    <Typography\r\n                        component=\"h1\"\r\n                        variant=\"h3\"\r\n                        align=\"center\"\r\n                        color=\"text.primary\"\r\n                        gutterBottom\r\n                        sx={{ fontWeight: 'bold', pt: 8 }}\r\n                    >\r\n                        VEROTUNKKI\r\n                    </Typography>\r\n                    <Typography alignSelf=\"center\" align=\"center\" variant=\"h6\" sx={{ pt: 3 }} component=\"p\">\r\n                        Verotunkki laskee puolestasi luovutusvoitot ja -tappiot, ja ulostaa verottajayhteensopivan\r\n                        rapsan. Hyvä elämä vittu\r\n                    </Typography>\r\n                    <Typography alignSelf=\"center\" variant=\"h6\" component=\"p\" sx={{ pt: 2 }}>\r\n                        Valitse verotettavan tulon tyyppi:\r\n                    </Typography>\r\n                    <Card sx={{ width: 450 }} onClick={() => {\r\n                        navigate(\"/crypto\");\r\n                    }}>\r\n                        <CardActionArea>\r\n                            <CardContent>\r\n                                <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n                                    Virtuaalivaluutat\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                    Perus hyvä Ethereum.\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                    Tuetut lähteet: <b>Coinbase, Coinbase Pro</b>\r\n                                </Typography>\r\n                            </CardContent>\r\n                        </CardActionArea>\r\n                    </Card>\r\n                    <Card sx={{ width: 450 }} onClick={() => {\r\n                        navigate(\"/securities\");\r\n                    }}>\r\n                        <CardActionArea>\r\n                            <CardContent>\r\n                                <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n                                    Arvopaperit\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                    Osakkeet ETF:t, rahastot ja muut arvopaperit.\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                    Tuetut lähteet: <b>Degiro, Nordnet</b>\r\n                                </Typography>\r\n                            </CardContent>\r\n                        </CardActionArea>\r\n                    </Card>\r\n                </Stack>\r\n                <Copyright />\r\n            </Container>\r\n        </ThemeProvider>\r\n    );\r\n}\r\n\r\nexport { FrontPageContent as Frontpage }\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport Container from '@mui/material/Container';\r\nimport { DropzoneAreaBase, FileObject } from 'react-mui-dropzone';\r\nimport UploadFileIcon from '@mui/icons-material/UploadFile';\r\nimport { createTheme, ThemeProvider } from '@mui/material';\r\n\r\n\r\ninterface Props {\r\n    zoneHeight: number,\r\n    handleFiles: (arg0: FileObject[]) => void;\r\n}\r\n\r\nconst Dropzone = ({ zoneHeight, handleFiles }: Props) => {\r\n    \r\n\r\n    const handleAlert = (message: any, variant: any) => {\r\n        console.log(`${variant}: ${message}`)\r\n    }\r\n    /***\r\n     * \r\n     * TODO REFACTOR ZONEHEIGHT INTO ENUM/BETTER LOGIC\r\n     */\r\n\r\n    return (\r\n        <Container sx={{\r\n            pt: 4, pb: 3,\r\n            width: \"100%\",\r\n            '& .MuiDropzoneArea-textContainer': {\r\n                color: 'black'\r\n            },\r\n            '& .MuiDropzoneArea-text': {\r\n                paddingTop: zoneHeight > 200 ? 8 : 4,\r\n                fontSize: 20,\r\n            },\r\n            '& .MuiDropzoneArea-root': {\r\n                height: zoneHeight,\r\n            },\r\n        }}>\r\n            <DropzoneAreaBase\r\n                acceptedFiles={['text/x-csv', 'text/plain', 'application/vnd.ms-excel', 'application/x-csv', 'application/csv', 'text/csv', 'text/comma-separated-values', 'text/x-comma-separated-values', 'text/tab-separated-values']}\r\n                onAdd={handleFiles}\r\n                onDelete={(fileObj) => console.log('Removed File:', fileObj)}\r\n                onAlert={handleAlert}\r\n                Icon={UploadFileIcon as any}\r\n                dropzoneText={zoneHeight > 200 ? \"Pudota CSV-tiedostoja tähän\" : \"Pudota lisää CSV-tiedostoja tähän\"}\r\n                fileObjects={[]}\r\n            />\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport { Dropzone }","const degiroFiToEn = {\n    \"Päiväys\": \"date\",\n    \"Aika\": \"time\",\n    \"Tuote\": \"security\",\n    \"ISIN\": \"ISIN\",\n    \"Reference\": \"reference\",\n    \"Venue\": \"venue\",\n    \"Quantity\": \"quantity\",\n    \"Kurssi\": \"rate\",\n    \"Kurssi-valuutta\": \"rateCurrency\",\n    \"Markkina-arvo\": \"marketValue\",\n    \"Markkina-arvo-valuutta\": \"marketValueCurrency\",\n    \"Value\": \"value\",\n    \"Value-valuutta\": \"valueCurrency\",\n    \"Vaihtokurssi\": \"exchangeRate\",\n    \"Transaction costs\": \"transactionCosts\",\n    \"Transaction costs-valuutta\": \"transactionCostsCurrency\",\n    \"Kokonaissumma\": \"totalAmount\",\n    \"Kokonaissumma-valuutta\": \"totalAmountCurrency\",\n    \"Order ID\": \"orderId\"\n}\n\nconst translateDegiro = (key: keyof typeof degiroFiToEn) => {\n    if (degiroFiToEn[key]) {\n        return degiroFiToEn[key]\n    }\n}\n\nexport default translateDegiro;","export interface DegiroHeaders {\n  readonly id: string;\n  time: string;\n  security: string;\n  ISIN: string;\n  reference: string;\n  venue: string;\n  quantity: number;\n  rate: number;\n  rateCurrency: string;\n  marketValue: number;\n  marketValueCurrency: string;\n  value: number;\n  valueCurrency: string;\n  exchangeRate: number;\n  transactionCosts: number;\n  transactionCostsCurrency: string;\n  totalAmount: number;\n  totalAmountCurrency: string;\n  orderId: string;\n  datetime: Date;\n  Source: \"Degiro\";\n  Error?: string;\n}\n\nexport interface CoinbaseHeaders {\n  readonly id: string;\n  Timestamp: Date;\n  TransactionType: \"BUY\" | \"SELL\" | \"RECEIVE\" | \"CONVERT\" | \"COINBASE EARN\";\n  Asset: string;\n  QuantityTransacted: number;\n  SpotPriceCurrency: string;\n  SpotPriceatTransaction: number;\n  Subtotal: number;\n  Total: number;\n  Fees: number;\n  Notes: string;\n  Source: \"Coinbase\";\n  Error?: string;\n}\n\nexport interface NordnetHeaders {\n  readonly id: string;\n  Id: string;\n  Kirjauspaiva: Date;\n  Kauppapaiva: Date;\n  Maksupaiva: string;\n  Salkku: string;\n  Tapahtumatyyppi: string;\n  Arvopaperi: string;\n  Instrumenttityyppi: string;\n  ISIN: string;\n  Maara: number;\n  Kurssi: number;\n  Korko: string;\n  Kokonaiskulut: number;\n  KokonaiskulutValuutta: string;\n  Summa: number;\n  Valuutta: string;\n  Hankintaarvo: string;\n  Tulos: string;\n  Kokonaismaara: number;\n  Saldo: string;\n  Vaihtokurssi: string;\n  Tapahtumateksti: string;\n  Mitatointipaiva: string;\n  Laskelma: string;\n  Vahvistusnumero: string;\n  Valityspalkkio: number;\n  ValityspalkkioValuutta: string;\n  Source: \"Nordnet\";\n  Error?: string;\n}\n\nexport interface CoinbaseProHeaders {\n  readonly id: string;\n  portfolio: string;\n  tradeid: string;\n  product: string;\n  side: string;\n  createdat: Date;\n  size: number;\n  sizeunit: string;\n  price: number;\n  fee: number;\n  total: number;\n  pricefeetotalunit: string;\n  Source: \"CoinbasePro\"\n  Error?: string;\n}\n\nexport const CoinBaseProHeaderValues = [\n  \"portfolio\",\n  \"tradeid\",\n  \"product\",\n  \"side\",\n  \"createdat\",\n  \"size\",\n  \"sizeunit\",\n  \"price\",\n  \"fee\",\n  \"total\",\n  \"pricefeetotalunit\"\n]\n\nexport const CoinBaseHeaderValues = [\n  'Timestamp',\n  'TransactionType',\n  'Asset',\n  'QuantityTransacted',\n  'SpotPriceCurrency',\n  'SpotPriceatTransaction',\n  'Subtotal',\n  'Total',\n  'Fees',\n  'Notes',\n]\n\nexport const DegiroHeaderValues = [\n  'date',\n  'time',\n  'security',\n  'ISIN',\n  'reference',\n  'venue',\n  'quantity',\n  'rate',\n  'rateCurrency',\n  'marketValue',\n  'marketValueCurrency',\n  'value',\n  'valueCurrency',\n  'exchangeRate',\n  'transactionCosts',\n  'transactionCostsCurrency',\n  'totalAmount',\n  'totalAmountCurrency',\n  'orderId',\n  'datetime'\n]\n\nexport const NordnetHeaderValues = [\n  'Id', 'Kirjauspaiva',\n  'Kauppapaiva', 'Maksupaiva',\n  'Salkku', 'Tapahtumatyyppi',\n  'Arvopaperi', 'Instrumenttityyppi',\n  'ISIN', 'Maara',\n  'Kurssi', 'Korko',\n  'Kokonaiskulut', 'KokonaiskulutValuutta',\n  'Summa', 'Valuutta',\n  'Hankintaarvo', 'Tulos',\n  'Kokonaismaara', 'Saldo',\n  'Vaihtokurssi', 'Tapahtumateksti',\n  'Mitatointipaiva', 'Laskelma',\n  'Vahvistusnumero', 'Valityspalkkio',\n  'ValityspalkkioValuutta'\n]\n","import { FileObject } from \"react-mui-dropzone\";\r\n\r\n/**\r\n * Workaround for browsers.\r\n * https://developer.mozilla.org/en-US/docs/Glossary/Base64#solution_1_%E2%80%93_escaping_the_string_before_encoding_it\r\n */\r\nconst b64_to_utf8 = (str: string) => (decodeURIComponent(escape(window.atob(str))))\r\n\r\nconst decodeUTF16LE = (binaryStr: string) => {\r\n    const cp = [];\r\n    for (let i = 0; i < binaryStr.length; i += 2)\r\n        cp.push(binaryStr.charCodeAt(i) | (binaryStr.charCodeAt(i + 1) << 8));\r\n    return String.fromCharCode(...cp);\r\n}\r\n\r\n/**\r\n * Gets the current file and checks it againts parsers.\r\n * @param filesCopy \r\n * @returns headers\r\n */\r\nconst chooseCSVParser = async (filesCopy: FileObject[], parsers: any[]) => {\r\n    const errors: Error[] = []\r\n    for (let i = 0; i < parsers.length; i++) {\r\n        try {\r\n            const inputFile = filesCopy[0].data ? filesCopy[0].data.toString().split(',')[1] : \"\"\r\n            const fileContentBuffer = parsers[i].name === 'getDataNordnet' ? decodeUTF16LE(atob(inputFile)) : b64_to_utf8(inputFile)\r\n            const fileContent = fileContentBuffer.toString()\r\n            const parsedData = await parsers[i](fileContent)\r\n            return parsedData\r\n        } catch (e: any) {\r\n            errors.push(e)\r\n        }\r\n    }\r\n    return [{ Source: \"Error\", Error: (errors.find(e => (e instanceof TypeError)) ?? errors[0]) }]\r\n}\r\n\r\n/**\r\n * Due to Jest (26.x.x) being the latest stable release, we have to default to commonjs module for tests.\r\n * The ESM module support through Babel was not sufficient and resulted in different behaviour. \r\n * @returns parse function\r\n */\r\nconst loadParser: any = async () => (process.env.NODE_ENV === 'test' ?\r\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n    // @ts-ignore  \r\n    (await import('csv/dist/cjs/sync.cjs')).parse :\r\n    (await import('csv/dist/esm/sync')).parse\r\n)\r\n\r\n\r\n\r\nexport { chooseCSVParser, loadParser }","import translateDegiro from './translations'\nimport moment from 'moment';\nimport 'moment-timezone';\nimport { Operation } from '../fifo/types'\nimport { DegiroHeaders, CoinbaseHeaders, CoinbaseProHeaders, CoinBaseProHeaderValues, CoinBaseHeaderValues, DegiroHeaderValues, NordnetHeaderValues, NordnetHeaders } from './types'\nimport { ColumnDataCrypto, ColumnDataSecurity } from '../../components/tableSettings'\nimport _ from 'lodash';\nimport { nanoid } from 'nanoid/async'\nimport { loadParser } from './helpers';\n\n\nconst getDataDegiro = async (input: string) => {\n    const orig = await parseDegiroCSV(input)\n    const column = getDegiroAsColumns(orig)\n    return {\n        orig: {Degiro : orig},\n        rows: column\n    }\n}\n\nconst getDataNordnet = async (input: string) => {\n    const orig = await parseNordnetCSV(input)\n    const column = getNordnetAsColumns(orig)\n    return {\n        orig: {Nordnet : orig},\n        rows: column\n    }\n}\nconst getDataCoinbase = async (input: string) => {\n    const orig = await parseCoinbaseCSV(input)\n    const column = getCoinbaseAsColumns(orig)\n    return {\n        orig: {Coinbase : orig},\n        rows: column\n    }\n}\n\nconst getDataCoinbasePro = async (input: string) => {\n    const orig = await parseCoinbaseProCSV(input)\n    const column = getCoinbaseProAsColumns(orig)\n    return {\n        orig: {CoinbasePro : orig},\n        rows: column\n    }\n}\n\n\n/**\n * \n * ************DEGIRO FUNCTIONS********************\n *\n */\n\nconst parseDegiroCSV = async (input: string): Promise<DegiroHeaders[]> => {\n    let prevField = \"\"\n    const parse = await loadParser()\n    const tmp = parse(input, {\n        cast: (value: any, context: any) => {\n            if (context.header) {\n                if (value === '') return translateDegiro(`${prevField}-valuutta` as any);\n                prevField = value\n                return translateDegiro(value)\n            }\n            return String(value)\n        },\n        columns: true,\n        trim: true,\n    });\n\n    const results = []\n    for await (const record of tmp) results.push(record)\n    const records: DegiroHeaders[] = results.map((transaction: any) => {\n        transaction['datetime'] = moment(`${transaction.date}-${transaction.time}`, \"DD-MM-YYYY-HH-mm\").toISOString()\n        return transaction\n    })\n\n    if (results.every(x => _.difference(_.sortBy(DegiroHeaderValues), _.sortBy(Object.keys(x))).length !== 0)) {\n        throw TypeError('All headers not found in the provided Degiro file.')\n    }\n\n    return (await Promise.all(records.map(async x => ({\n        ...x, Source: \"Degiro\", id: (await nanoid(10))\n    })))) as DegiroHeaders[]\n\n}\n\nconst getDegiroAsColumns = (records: DegiroHeaders[]): ColumnDataSecurity[] => {\n    const ret = records.map(record => {\n        return {\n            id: record.id,\n            paivays: new Date(record.datetime),\n            tuote: record.security,\n            isin: record.ISIN,\n            arvo: `${record.value} ${record.valueCurrency}`,\n            maara: record.quantity,\n            kulut: record.transactionCosts.toString(),\n            kurssi: `${record.rate} ${record.rateCurrency}`,\n            kokonaissumma: `${record.totalAmount} ${record.totalAmountCurrency}`,\n            operation: record.quantity > 0 ? \"BUY\" : \"SELL\",\n        } as ColumnDataSecurity\n    })\n    return ret\n}\n\nconst prepareDegiroForFIFO = (rawData: DegiroHeaders[]): Operation[] => {\n    return rawData\n        .map(record => {\n            return {\n                symbol: record.security,\n                date: record.datetime,\n                price: record.rate,\n                amount: record.quantity,\n                type: record.quantity > 0 ? \"BUY\" : \"SELL\",\n                transactionFee: Math.abs(record.transactionCosts),\n            }\n        })\n}\n\n\n/**\n * \n * ************NORDNET FUNCTIONS********************\n *\n */\n\nconst parseNordnetCSV = async (input: string): Promise<NordnetHeaders[]> => {\n    const parse = await loadParser()\n    const tmp = parse(input, {\n        delimiter: [\"\\t\"],\n        columns: true,\n        trim: true,\n        cast: (value: any, context: any) => {\n            if (context.header) {\n                let header = value\n                if (header.includes('ä')) header = header.replace(/ä/g, 'a')\n                if (header.includes('ö')) header = header.replace(/ö/g, 'o')\n                if (header.includes('-')) header = header.replace(/-/g, '')\n                return header.replace(/\\s/g, '')\n            }\n            const column = context.column\n            //these are probably unneeded\n            if (column === 'Maara' ||\n                column === 'Kurssi' ||\n                column === 'Valityspalkkio' ||\n                column === 'Summa' ||\n                column === 'Kokonaiskulut' ||\n                column === 'Kokonaismaara') return Number.parseFloat(value.replace(/,/g, '.'));\n            if (column === 'Kirjauspaiva' ||\n                column === 'Kauppapaiva' ||\n                column === 'Maksupaiva') return moment(value, \"YYYY-MM-DD\").toDate()\n            return String(value)\n        },\n    })\n\n    const results = []\n    for await (const record of tmp) {\n        results.push(record)\n    }\n\n    if (results.every(x => _.difference(NordnetHeaderValues, _.sortBy(Object.keys(x))).length !== 0)) {\n        throw TypeError('All headers not found in the provided Nordnet file.')\n    }\n\n    return (await Promise.all(results.map(async x => ({\n        ...x, Source: \"Nordnet\", id: (await nanoid(10))\n    })))) as NordnetHeaders[]\n}\n\nconst getNordnetAsColumns = (records: NordnetHeaders[]): ColumnDataSecurity[] => {\n    const ret = records.map(record => {\n        return {\n            id: record.id,\n            paivays: new Date(record.Kauppapaiva),\n            tuote: record.Arvopaperi,\n            isin: record.ISIN,\n            arvo: `${record.Summa} ${record.Valuutta}`,\n            maara: record.Maara,\n            kulut: record.Kokonaiskulut.toString(),\n            kurssi: `${record.Kurssi} ${record.Valuutta}`,\n            kokonaissumma: `${record.Summa - record.Kokonaiskulut} ${record.Valuutta}`,\n            operation: record.Tapahtumatyyppi,\n        } as ColumnDataSecurity\n    })\n    return ret\n}\n\n\nconst prepareNordnetForFIFO = (rawData: NordnetHeaders[]): Operation[] => {\n    return rawData\n        .filter(x => x.Tapahtumatyyppi === 'MYYNTI' || x.Tapahtumatyyppi === 'OSTO')\n        .map(record => {\n            return {\n                symbol: record.Arvopaperi,\n                date: record.Kauppapaiva,\n                price: record.Kurssi,\n                amount: record.Maara,\n                type: record.Tapahtumatyyppi === 'OSTO' ? \"BUY\" : \"SELL\",\n                transactionFee: record.Kokonaiskulut,\n            }\n        })\n}\n\n\n\n/**\n * \n * ************COINBASE FUNCTIONS********************\n *\n */\n\nconst parseCoinbaseCSV = async (input: string): Promise<CoinbaseHeaders[]> => {\n    const startAt = _.findIndex(input?.split('\\n'), (o) => o?.startsWith('Timestamp,Transaction'))\n    const parse = await loadParser()\n    const results = parse(input, {\n        cast: (value: any, context: any) => {\n            if (context.header) {\n                if (value.includes('(')) return value.split('(')[0].replace(/\\s/g, '')\n                return value.replace(/\\s/g, '')\n            }\n            moment.tz\n            if (context.column === 'Timestamp') return moment(value, \"YYYY-MM-DD-HH-mm-ss\").toISOString()\n            if (context.column === 'TransactionType') return value.toUpperCase()\n            return String(value)\n        },\n        columns: true,\n        from_line: startAt > 0 ? startAt + 1 : 1,\n        trim: true,\n    })\n    if (results.every((x: any) => _.difference(CoinBaseHeaderValues, _.sortBy(Object.keys(x))).length !== 0)) {\n        throw TypeError('All headers not found in the provided Coinbase file.')\n    }\n\n    return (await Promise.all(results.map(async (x: any) => ({\n        ...x, Source: \"Coinbase\", id: (await nanoid(10))\n    })))) as CoinbaseHeaders[]\n}\n\nconst prepareCoinbaseForFIFO = (rawData: CoinbaseHeaders[]): Operation[] => {\n    const prepareRawFifo: CoinbaseHeaders[] = []\n    rawData.forEach(statement => {\n        if (statement.TransactionType === 'CONVERT') {\n            const info = statement.Notes.split(' ')\n            //const soldAmount = info[1]\n            //const soldCurrency = info[2]\n            const boughAmount = Number(info[4])\n            const boughtCurrency = info[5]\n            prepareRawFifo.push({\n                ...statement,\n                TransactionType: \"SELL\",\n                Fees: 0,\n                Total: statement.Total - statement.Fees\n            })\n            prepareRawFifo.push({\n                ...statement,\n                TransactionType: \"BUY\",\n                Asset: boughtCurrency,\n                QuantityTransacted: boughAmount,\n                SpotPriceatTransaction: statement.Subtotal / boughAmount\n            })\n        } else if (statement.TransactionType === 'COINBASE EARN') {\n            prepareRawFifo.push({\n                ...statement,\n                TransactionType: \"BUY\",\n            })\n        } else if (statement.TransactionType === 'RECEIVE') {\n            prepareRawFifo.push({\n                ...statement,\n                TransactionType: \"BUY\",\n            })\n        }\n    })\n\n    const dataFifo: Operation[] = rawData.concat(prepareRawFifo)\n        .filter(x => x.TransactionType === 'BUY' || x.TransactionType === 'SELL')\n        .map(record => {\n            return {\n                symbol: record.Asset,\n                date: new Date(record.Timestamp),\n                price: Number(record.SpotPriceatTransaction),\n                amount: Number(record.QuantityTransacted),\n                type: record.TransactionType as \"BUY\" | \"SELL\",\n                transactionFee: Number(record.Fees ?? 0),\n            }\n        })\n    return dataFifo\n\n}\n\n\nconst getCoinbaseAsColumns = (records: CoinbaseHeaders[]): ColumnDataCrypto[] => {\n    const ret = records.map(record => {\n        const value = `${record.Subtotal ?\n            Number(record.Subtotal) : (record.QuantityTransacted * record.SpotPriceatTransaction)} ${record.SpotPriceCurrency}`\n        return {\n            id: record.id,\n            paivays: new Date(record.Timestamp),\n            tuote: record.Asset,\n            arvo: value,\n            maara: record.QuantityTransacted,\n            kulut: `${Number(record.Fees) ? Number(record.Fees) : 0} ${record.SpotPriceCurrency}`,\n            kurssi: `${record.SpotPriceatTransaction} ${record.SpotPriceCurrency}`,\n            kokonaissumma: `${Number(record.Total ? record.Total : 0)} ${record.SpotPriceCurrency}`,\n            operation: record.TransactionType,\n        } as ColumnDataCrypto\n    })\n    return ret\n}\n\n/**\n * \n * ************COINBASE PRO FUNCTIONS********************\n *\n */\n\nconst parseCoinbaseProCSV = async (input: string): Promise<CoinbaseProHeaders[]> => {\n    const parse = await loadParser()\n    const tmp = parse(input, {\n        cast: (value: any, context: any) => {\n            if (context.header) {\n                if (value.includes('/')) return value.replace(/\\//g, '').replace(/\\s/g, '')\n                return value.replace(/\\s/g, '')\n            }\n            if (context.column === 'createdat') return new Date(value).toISOString()\n            return String(value)\n        },\n        columns: true,\n        trim: true,\n    })\n\n    const results = []\n    for await (const record of tmp) results.push(record)\n\n\n    if (results.every(x => _.difference(_.sortBy(CoinBaseProHeaderValues), _.sortBy(Object.keys(x))).length !== 0)) {\n        throw TypeError('All headers not found in the provided Coinbase Pro file.')\n    }\n\n    return (await Promise.all(results.map(async (x: any) => ({\n        ...x, Source: \"CoinbasePro\",\n        product: x.product.split('-')[0],\n        Error: (x.pricefeetotalunit !== \"EUR\" ? \"Invalid currency detected\" : undefined),\n        id: (await nanoid(10))\n    })))) as CoinbaseProHeaders[]\n}\n\nconst getCoinbaseProAsColumns = (records: CoinbaseProHeaders[]): ColumnDataCrypto[] => {\n    const ret = records.map(record => {\n        return {\n            id: record.id,\n            paivays: record.createdat,\n            tuote: record.product,\n            arvo: `${record.size * record.price} ${record.pricefeetotalunit}`,\n            maara: record.size,\n            kulut: `${record.fee ?? record.fee} ${record.pricefeetotalunit}`,\n            kurssi: `${record.price} ${record.pricefeetotalunit}`,\n            kokonaissumma: `${record.total} ${record.pricefeetotalunit}`,\n            operation: record.side,\n        } as ColumnDataCrypto\n    })\n    return ret\n}\n\n\nconst prepareCoinbaseProForFIFO = (rawData: CoinbaseProHeaders[]): Operation[] => {\n    return rawData\n        .filter(x => x.side === 'BUY' || x.side === 'SELL')\n        .map(record => {\n            return {\n                symbol: record.product,\n                date: new Date(record.createdat),\n                price: Number(record.price),\n                amount: Number(record.size),\n                type: record.side as \"BUY\" | \"SELL\",\n                transactionFee: Number(record.fee),\n            }\n        })\n}\n\nexport {\n    parseCoinbaseCSV,\n    parseDegiroCSV,\n    parseNordnetCSV,\n    getDegiroAsColumns,\n    getCoinbaseAsColumns,\n    prepareCoinbaseForFIFO,\n    parseCoinbaseProCSV,\n    getCoinbaseProAsColumns,\n    prepareCoinbaseProForFIFO,\n    getNordnetAsColumns,\n    prepareNordnetForFIFO,\n    prepareDegiroForFIFO,\n    getDataDegiro,\n    getDataNordnet,\n    getDataCoinbase,\n    getDataCoinbasePro,\n}\n","import { GridColTypeDef, GridColumns } from '@mui/x-data-grid';\r\n\r\nexport interface ColumnTransaction {\r\n    id: 'ticker' | 'buydate' | 'selldate' | 'amountsold' | 'transferPrice' | 'acquisitionPrice' | 'acquisitionFee' | 'transferFee' | 'profitOrLoss';\r\n    label: string;\r\n    minWidth?: number;\r\n    align?: 'right';\r\n    format?: (value: number) => string;\r\n}\r\n\r\n\r\n/* const columnsTransaction: readonly ColumnTransaction[] = [\r\n    { id: 'ticker', label: 'Tuote', minWidth: 120 },\r\n    { id: 'buydate', label: 'Hankintapäivä', minWidth: 150 },\r\n    { id: 'selldate', label: 'Luovutuspäivä', minWidth: 150 },\r\n    {\r\n        id: 'amountsold', label: 'Myyty kpl', minWidth: 100,\r\n        format: (value: number) => value.toFixed(8)\r\n    },\r\n    { id: 'transferPrice', label: 'Luovutushinta', minWidth: 120 },\r\n    {\r\n        id: 'acquisitionPrice', label: 'Hankintahinta', minWidth: 100,\r\n        format: (value: number) => value.toFixed(2)\r\n    },\r\n    { id: 'acquisitionFee', label: 'Hankintakulut', minWidth: 100 },\r\n    { id: 'transferFee', label: 'Luovutuskulut', minWidth: 80 },\r\n    {\r\n        id: 'profitOrLoss', label: 'Voitto/Tappio', minWidth: 170,\r\n        format: (value: number) => value.toFixed(3)\r\n    },\r\n]; */\r\n\r\n\r\nconst currencyFormatter = (value: any) => new Intl.NumberFormat('fi-FI', {\r\n    style: 'currency',\r\n    currency: value,\r\n});\r\n\r\nconst currencyFormat: GridColTypeDef = {\r\n    type: 'string',\r\n    width: 130,\r\n    valueFormatter: ({ value }) => {\r\n        const str = String(value) ? String(value) : \"0 EUR\"\r\n        const arr = str.split(' ').length === 2 ? str.split(' ') : \"0 EUR\"\r\n        return currencyFormatter(arr[1]).format(Number(arr[0]))\r\n    },\r\n    cellClassName: 'font-tabular-nums',\r\n};\r\n\r\nconst columnsSecurity: GridColumns = [\r\n    { field: 'paivays', headerName: 'Paivays', type: 'date', editable: true, minWidth: 180, },\r\n    { field: 'operation', headerName: 'Operaatio', type: 'string', editable: true, minWidth: 120 },\r\n    { field: 'isin', headerName: 'ISIN', type: 'string', editable: true, minWidth: 120 },\r\n    { field: 'arvo', headerName: 'Arvo', type: 'string', editable: true, minWidth: 120 },\r\n    { field: 'maara', headerName: 'Määrä', type: 'number', editable: true, minWidth: 120 },\r\n    { field: 'kurssi', headerName: 'Kurssi', type: 'string', editable: true, minWidth: 120 },\r\n    { field: 'kulut', headerName: 'Kulut', type: 'number', editable: true, minWidth: 110 },\r\n    { field: 'kokonaissumma', headerName: 'Kokonaissumma', type: 'string', editable: true, minWidth: 170 },\r\n];\r\n\r\n\r\n\r\n\r\nconst columnsCrypto: GridColumns = [\r\n    { field: 'paivays', headerName: 'Paivays', type: 'date', editable: true, minWidth: 180, },\r\n    { field: 'operation', headerName: 'Operaatio', type: 'string', editable: true, minWidth: 120 },\r\n    { field: 'tuote', headerName: 'Tuote', type: 'string', editable: true, minWidth: 120 },\r\n    { field: 'arvo', headerName: 'Arvo', type: 'string', editable: true, minWidth: 120 },\r\n    { field: 'maara', headerName: 'Määrä', type: 'string', editable: true, minWidth: 120 },\r\n    { field: 'kurssi', headerName: 'Kurssi', type: 'string', editable: true, minWidth: 120 },\r\n    { field: 'kulut', headerName: 'Kulut', type: 'number', editable: true, minWidth: 110 },\r\n    { field: 'kokonaissumma', headerName: 'Kokonaissumma', type: 'string', editable: true, minWidth: 170 },\r\n    //{ field: 'kokonaissumma', headerName: 'Kokonaissumma', ...currencyFormat, editable: true, minWidth: 170 },\r\n];\r\n\r\n\r\nconst columnsTransaction: GridColumns = [\r\n    { field: 'ticker', headerName: 'Tuote', type: 'string', editable: false, minWidth: 50, },\r\n    { field: 'buydate', headerName: 'Hankintapäivä', type: 'date', editable: false, minWidth: 160 },\r\n    { field: 'selldate', headerName: 'Luovutuspäivä', type: 'date', editable: false, minWidth: 160 },\r\n    { field: 'amountsold', headerName: 'Myyty kpl', type: 'number', editable: false, minWidth: 50 },\r\n    { field: 'transferPrice', headerName: 'Luovutushinta', type: 'string', editable: false, minWidth: 120 },\r\n    { field: 'acquisitionPrice', headerName: 'Hankintahinta', type: 'string', editable: false, minWidth: 120 },\r\n    { field: 'acquisitionFee', headerName: 'Hankintakulut', type: 'string', editable: false, minWidth: 120 },\r\n    { field: 'transferFee', headerName: 'Luovutuskulut', type: 'string', editable: false, minWidth: 120 },\r\n    { field: 'profitOrLoss', headerName: 'Voitto/Tappio', type: 'string', editable: false, minWidth: 170 },\r\n];\r\n\r\n\r\nexport interface ColumnDataSecurity {\r\n    readonly id: string;\r\n    paivays: Date;\r\n    tuote: string;\r\n    isin: string;\r\n    arvo: string;\r\n    maara: number;\r\n    kulut: string;\r\n    kurssi: string;\r\n    kokonaissumma: string;\r\n    operation: string;\r\n}\r\n\r\n\r\nexport interface ColumnDataCrypto {\r\n    readonly id: string;\r\n    paivays: Date;\r\n    operation: string;\r\n    tuote: string;\r\n    arvo: string;\r\n    maara: number;\r\n    kulut: string;\r\n    kurssi: string;\r\n    kokonaissumma: string;\r\n}\r\n\r\n\r\nexport interface ColumnDataTransaction {\r\n    readonly id: number;\r\n    ticker: string\r\n    buydate: Date\r\n    selldate: Date\r\n    amountsold: number\r\n    transferPrice: number\r\n    acquisitionPrice: number\r\n    acquisitionFee: number\r\n    transferFee: string\r\n    profitOrLoss: string\r\n}\r\n\r\n\r\n\r\nexport { columnsSecurity, columnsCrypto, columnsTransaction }\r\n","import { columnsTransaction, ColumnDataTransaction } from './tableSettings'\r\nimport {\r\n    DataGrid,\r\n    GridToolbarContainer,\r\n    GridToolbarExport,\r\n    gridClasses,\r\n    GridRowsProp\r\n} from '@mui/x-data-grid';\r\ninterface Props {\r\n    rows: ColumnDataTransaction[],\r\n}\r\n\r\nconst CustomToolbar = () => {\r\n    return (\r\n        <GridToolbarContainer className={gridClasses.toolbarContainer}>\r\n            <GridToolbarExport />\r\n        </GridToolbarContainer>\r\n    );\r\n}\r\n\r\nconst ResultTable = ({ rows }: Props) => {\r\n    return (<div style={{ width: '100%' }}>\r\n        <DataGrid\r\n            sx={{\r\n                minHeight: 700,\r\n            }}\r\n            rows={rows as GridRowsProp}\r\n            columns={columnsTransaction}\r\n            components={{\r\n                Toolbar: CustomToolbar,\r\n            }}\r\n        />\r\n    </div>\r\n\r\n    )\r\n}\r\n\r\nexport { ResultTable }\r\n","\r\nimport { Alert, Box, Button, createTheme, Paper, Stack, styled, Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow, ThemeProvider } from '@mui/material';\r\n\r\ninterface Props {\r\n    header: string,\r\n    content: string,\r\n    contentColor: string,\r\n    footer: string,\r\n    footerSecondary: string,\r\n}\r\n\r\n\r\nconst ResultCard = ({ header, content, footer, footerSecondary, contentColor }: Props) => {\r\n    const theme = createTheme({\r\n        typography: {\r\n            fontSize: 14,\r\n        },\r\n        palette: {\r\n            background: {\r\n                paper: '#fff',\r\n            },\r\n            text: {\r\n                primary: '#173A5E',\r\n                secondary: '#46505A',\r\n            },\r\n            action: {\r\n                active: '#001E3C',\r\n            }\r\n        }\r\n    });\r\n    return (\r\n        <ThemeProvider theme={theme}><Box\r\n            sx={{\r\n                bgcolor: 'background.paper',\r\n                boxShadow: 1,\r\n                borderRadius: 1,\r\n                p: 2,\r\n                minWidth: 350,\r\n            }}\r\n        >\r\n            <Box sx={{ color: 'text.secondary' }}>{header}</Box>\r\n            <Box sx={{ color: 'text.primary', fontSize: 30, fontWeight: 'medium' }}>\r\n                {content}\r\n            </Box>\r\n            <Box\r\n                sx={{\r\n                    color: contentColor,\r\n                    display: 'inline',\r\n                    fontWeight: 'medium',\r\n                    mx: 0.5,\r\n                }}\r\n            >\r\n                {footer}\r\n            </Box>\r\n            <Box sx={{ color: 'text.secondary', display: 'inline', fontSize: 12 }}>\r\n                {footerSecondary}\r\n            </Box>\r\n        </Box>\r\n        </ThemeProvider>)\r\n}\r\n\r\nexport { ResultCard }","import { Operation, Transaction } from './types';\nimport _ from 'lodash';\n\nexport interface CapitalResults {\n  /**\n   * Sale that triggered the capital gains\n   */\n  transactions: Transaction[]\n\n  /**\n   * Capital gains triggered from the sale\n   */\n  capitalGainPerSellDate: number\n}\n\n/**\n * Calculates the FIFO capital gains for the given operation history.\n * It separates capital gains of securities using the symbols given\n * in each operation.\n *\n * @param operationHistory History of operations (buy and sales) to\n * calculate the capital gains for.\n *\n * @throws If the amount of securities of all sell operations of a given symbol\n * exceeds the amount of securities of all buy operations for the same symbol.\n * This indicates that there is an error in the input, since it is not possible\n * to sell more securities than the ones bought.\n *\n * @returns The FIFO capital gains with details of the transaction details\n * for each sell operation\n *\n * [\n    {\n        \"capitalGainPerSellDate\": -315.6,\n        \"transactions\": [\n            {\n                \"ticker\": \"GME\",\n                \"buydate\": \"2019-02-01T00:00:00.000Z\",\n                \"selldate\": \"2020-03-01T00:00:00.000Z\",\n                \"amountsold\": 3,\n                \"transferPrice\": 50,\n                \"profitOrLoss\": -300,\n                \"acquisitionPrice\": 150,\n                \"acquisitionFee\": 4.2,\n                \"transferFee\": 4.1\n            },\n            {\n                \"ticker\": \"GME\",\n                \"buydate\": \"2020-01-01T00:00:00.000Z\",\n                \"selldate\": \"2020-03-01T00:00:00.000Z\",\n                \"amountsold\": 1,\n                \"transferPrice\": 50,\n                \"profitOrLoss\": 0,\n                \"acquisitionPrice\": 50,\n                \"acquisitionFee\": 3.2,\n                \"transferFee\": 4.1\n            }\n        ]\n    },\n    {\n        \"capitalGainPerSellDate\": 97.7,\n        \"transactions\": [\n            {\n                \"ticker\": \"GME\",\n                \"buydate\": \"2020-01-01T00:00:00.000Z\",\n                \"selldate\": \"2020-04-01T00:00:00.000Z\",\n                \"amountsold\": 3,\n                \"transferPrice\": 86,\n                \"profitOrLoss\": 108,\n                \"acquisitionPrice\": 50,\n                \"acquisitionFee\": 3.2,\n                \"transferFee\": 7.1\n            }\n        ]\n    },\n    {\n        \"capitalGainPerSellDate\": 995.6999999999999,\n        \"transactions\": [\n            {\n                \"ticker\": \"BB\",\n                \"buydate\": \"2020-02-01T00:00:00.000Z\",\n                \"selldate\": \"2021-01-01T00:00:00.000Z\",\n                \"amountsold\": 10,\n                \"transferPrice\": 150,\n                \"profitOrLoss\": 1000,\n                \"acquisitionPrice\": 50,\n                \"acquisitionFee\": 2.2,\n                \"transferFee\": 2.1\n            }\n        ]\n    }\n]\n */\nexport function calculateFIFOCapitalGains(\n  operationHistory: Operation[]\n): CapitalResults[] {\n  const history = operationHistory.map((obj) => ({ ...obj }));\n  const sales = history.filter(({ type }) => type === 'SELL');\n\n  return sales.reduce<CapitalResults[]>(\n    (capitalGainPerSellDate, sale) => [\n      ...capitalGainPerSellDate,\n      calculateCapitalGainsForSale(history, sale),\n    ],\n    []\n  );\n}\n\n/**\n * Calculates the FIFO capital gains for the given operation history. \n * Transfer fees are divided between SELL operations, so the end resulting\n * SELL batch trasnferprice for the bought asset remains the same.\n *\n * @param operationHistory History of operations (buy and sales) to\n * calculate the capital gains for. \n *\n * @returns The FIFO transaction details by every sold security\n * example\n *  {\n        ticker: 'GME',\n        buydate: 2020-01-01T00:00:00.000Z,\n        selldate: 2020-04-01T00:00:00.000Z,\n        amountsold: 3,\n        transferPrice: 86,\n        profitOrLoss: 108,\n        acquisitionPrice: 50,\n        acquisitionFee: 3.2,\n        transferFee: 7.1\n      },\n      {\n        ticker: 'BB',\n        buydate: 2020-02-01T00:00:00.000Z,\n        selldate: 2021-01-01T00:00:00.000Z,\n        amountsold: 10,\n        transferPrice: 150,\n        profitOrLoss: 1000,\n        acquisitionPrice: 50,\n        acquisitionFee: 2.2,\n        transferFee: 2.1\n      }\n *\n */\nexport const calculateFIFOTransactions = (operationHistory: Operation[]): Transaction[] => {\n  const a = calculateFIFOCapitalGains(operationHistory).flatMap((gainByDate) => {\n    const totalAmount = _.sumBy(gainByDate.transactions, (o) => o.amountsold)\n    const dividedFees = gainByDate.transactions.map(x => ({\n      ...x,\n      transferFee: (x.amountsold / totalAmount) * x.transferFee\n    }))\n    const transferFeeForSell = gainByDate.transactions[0] ? gainByDate.transactions[0].transferFee : 0\n    const transferFeeSummedFromSELLOperation = _.sumBy(dividedFees, (o) => o.transferFee)\n    if (transferFeeForSell !== transferFeeSummedFromSELLOperation) {\n      console.error(`Amount of fees for do not match for ${gainByDate.transactions[0]?.ticker}: ${transferFeeForSell} and ${transferFeeSummedFromSELLOperation}`)\n    }\n    return dividedFees\n  });\n  if (a.length === 0) {\n    throw new Error(\"No SELL transactions found. Have you sold any asset?\")\n  }\n  return a\n}\n\n\nconst calculateCapitalGainsForSale = (\n  operationHistory: Operation[],\n  sale: Operation\n): CapitalResults => {\n  let capitalGainPerSellDate = 0;\n  const transactions: Transaction[] = [];\n\n  const relatedBuyTransactions = _.orderBy(operationHistory, (o: Operation) => [o.date, o.type], ['asc', 'desc']).filter(\n    ({ type, symbol, date }) =>\n      type === 'BUY' && symbol === sale.symbol && date <= sale.date\n  );\n\n  // Order the result set in ASC order so the oldest buy operations are handled first\n  relatedBuyTransactions.forEach(\n    (buy) => {\n      const amountSold = Math.min(sale.amount, buy.amount);\n      // if the total amount of held shares have not yet been sold\n      if (amountSold === 0) return;\n      const trs: Transaction = {\n        ticker: sale.symbol,\n        buydate: buy.date,\n        selldate: sale.date,\n        amountsold: amountSold,\n        transferPrice: sale.price,\n        profitOrLoss: amountSold * (sale.price - buy.price),\n        acquisitionPrice: buy.price,\n        acquisitionFee: buy.transactionFee,\n        transferFee: sale.transactionFee,\n      };\n      transactions.push(trs);\n\n      buy.amount -= amountSold;\n      sale.amount -= amountSold;\n      // We reduce the transactionsfees from the capital gain\n      const totalPrice =\n        amountSold * (sale.price - buy.price)\n      capitalGainPerSellDate += totalPrice;\n    }\n  );\n  // TODO: removee nii perkeleesti ja implementoi uudestaan paremmin\n  //if (Number(sale.amount ?  sale.amount.toFixed(6) : 0) > 0) {\n  if (Math.round(sale.amount) > 0) {\n    throw Error(\n      `Amount of sales for ticker ${sale.symbol} exceeds the amount of buys by ${sale.amount}. In transaction made in ${new Date(sale.date)\n        .toLocaleString('en-GB', { timeZone: 'UTC' })}`\n    );\n  }\n\n  return {\n    capitalGainPerSellDate,\n    transactions: transactions,\n  };\n};\n","import React, { ChangeEvent, useEffect, useState } from 'react'\r\nimport { Paper, Stack, styled, Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow } from '@mui/material';\r\nimport { ColumnDataCrypto, ColumnDataSecurity, columnsCrypto, columnsTransaction, ColumnTransaction, ColumnDataTransaction, columnsSecurity } from './tableSettings'\r\nimport { DataGrid, GridCellEditCommitParams, GridRowsProp } from '@mui/x-data-grid';\r\nimport { rawDatas } from './PreviewData';\r\nimport _ from 'lodash';\r\n\r\ninterface Props {\r\n    rows: ColumnDataSecurity[] | ColumnDataCrypto[],\r\n    mode: 'CRYPTO' | 'SECURITY'\r\n    rawDataAsColumns: ColumnDataSecurity[] | ColumnDataCrypto[],\r\n    rawDatatSetCallback(arg0: ColumnDataSecurity[] | ColumnDataCrypto[]): void\r\n}\r\n\r\nconst PreviewTable = ({ rows, mode, rawDataAsColumns, rawDatatSetCallback }: Props) => {\r\n    const [cellCommit, setCellCommit] = useState({} as any);\r\n\r\n    useEffect(() => {\r\n        if (cellCommit?.row?.id) {\r\n            const matchingRow = rawDataAsColumns.find(y => y.id === cellCommit.row.id) \r\n            const newObj = {...matchingRow, [cellCommit.field] : cellCommit.value} as ColumnDataSecurity | ColumnDataCrypto\r\n            const arr =  rawDataAsColumns.map(item => item.id === newObj.id ? newObj : item) as ColumnDataSecurity[] | ColumnDataCrypto[]\r\n            rawDatatSetCallback(arr)\r\n        }\r\n    }, [cellCommit])\r\n\r\n    return (\r\n\r\n        <DataGrid\r\n            sx={{\r\n                height: 700,\r\n                '& .font-tabular-nums': {\r\n                    fontVariantNumeric: 'tabular-nums',\r\n                },\r\n            }}\r\n            rows={rows as GridRowsProp}\r\n            columns={mode === 'CRYPTO' ? columnsCrypto : columnsSecurity}\r\n            onCellEditCommit={(newSelection) => {\r\n                setCellCommit(newSelection);\r\n            }}\r\n        />\r\n\r\n    )\r\n}\r\n\r\nexport { PreviewTable }\r\n","import { SetStateAction, useEffect, useState } from 'react'\r\nimport _ from 'lodash';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport GlobalStyles from '@mui/material/GlobalStyles';\r\nimport Container from '@mui/material/Container';\r\nimport Typography from '@mui/material/Typography';\r\nimport { Alert, Box, Button, createTheme, Stack, ThemeProvider } from '@mui/material';\r\nimport { Dropzone } from './Dropzone';\r\nimport { FileObject } from 'react-mui-dropzone';\r\nimport { Copyright } from './Copyright';\r\nimport { getCoinbaseAsColumns, getCoinbaseProAsColumns, getDataCoinbase, getDataCoinbasePro, getDataDegiro, getDataNordnet, getDegiroAsColumns, getNordnetAsColumns, parseCoinbaseCSV, parseCoinbaseProCSV, parseDegiroCSV, parseNordnetCSV, prepareCoinbaseForFIFO, prepareCoinbaseProForFIFO, prepareDegiroForFIFO, prepareNordnetForFIFO } from '../utils/parsers/loadTransactions'\r\nimport { CoinbaseHeaders, CoinbaseProHeaders, DegiroHeaders, NordnetHeaders } from '../utils/parsers/types';\r\nimport { ResultTable } from './ResultTable'\r\nimport { ResultCard } from './ResultCard'\r\nimport { ColumnDataCrypto, ColumnDataSecurity, ColumnDataTransaction, columnsCrypto, columnsSecurity } from './tableSettings';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport DownloadIcon from '@mui/icons-material/Download';\r\nimport { calculateFIFOTransactions } from '../utils/fifo'\r\nimport { Operation, Transaction } from '../utils/fifo/types'\r\nimport { chooseCSVParser } from '../utils/parsers/helpers'\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\nimport { PreviewTable } from './PreviewTable'\r\nimport { nanoid } from 'nanoid'\r\n\r\nconst parsersCrypto = [getDataCoinbase, getDataCoinbasePro]\r\nconst parsersSecurity = [getDataDegiro, getDataNordnet]\r\n\r\nexport interface rawDatas {\r\n    Coinbase: CoinbaseHeaders[]\r\n    CoinbasePro: CoinbaseProHeaders[]\r\n    Degiro: DegiroHeaders[]\r\n    Nordnet: NordnetHeaders[]\r\n}\r\n\r\ninterface calculatedResultsType {\r\n    capitalGains: number,\r\n    capitalLosses: number,\r\n    transactionTotal: number,\r\n    netProfit: number\r\n}\r\n\r\nexport interface resultFromParse {\r\n    orig: rawDatas\r\n    rows: ColumnDataSecurity[] | ColumnDataCrypto[]\r\n}\r\n\r\ninterface Props {\r\n    mode: \"CRYPTO\" | \"SECURITY\"\r\n}\r\n\r\nconst PreviewData = ({ mode }: Props) => {\r\n    const [zoneHeight, setZoneHeight] = useState(400);\r\n    const [files, setFiles] = useState<FileObject[]>([]);\r\n    const [showTable, setShowTable] = useState(false)\r\n\r\n    const [rowDataColumn, setRowDataColumn] = useState<ColumnDataSecurity[] | ColumnDataCrypto[]>([] as any[]);\r\n    const [rawDataAsColumns, setRawDataAsColumns] = useState<ColumnDataSecurity[] | ColumnDataCrypto[]>([] as any[]);\r\n    const [originalData, setOriginalData] = useState<rawDatas>({} as rawDatas);\r\n    const rawDataSetCallback = (newRawData: ColumnDataSecurity[] | ColumnDataCrypto[]) => setRawDataAsColumns(newRawData)\r\n\r\n    const [results, setResults] = useState<ColumnDataTransaction[]>([]);\r\n    const [parseError, setParseError] = useState(\"\")\r\n    const [errorFifo, setErrorFifo] = useState(\"\")\r\n    const [showCurrencyFetchButton, setShowCurrencyFetchButton] = useState(false)\r\n    const [calculatedResults, setCalculatedResults] = useState({} as calculatedResultsType);\r\n\r\n    const fileCallback = (file: FileObject[]) => setFiles([...files, ...file])\r\n\r\n    const clearRows = () => {\r\n        setFiles([])\r\n        setRowDataColumn([])\r\n        setRawDataAsColumns([])\r\n        setOriginalData({} as any)\r\n        setShowTable(false)\r\n        setZoneHeight(400)\r\n        setResults([])\r\n    }\r\n\r\n    const calculateFIFO = () => {\r\n        try {\r\n            const coinBaseIssueRows = rawDataAsColumns.filter(customOp => (customOp.operation === 'CONVERT' ||\r\n                customOp.operation === 'COINBASE EARN' ||\r\n                customOp.operation === 'RECEIVE') &&\r\n                originalData['Coinbase'].map(x => x.id).includes(customOp.id)) as ColumnDataCrypto[]\r\n\r\n\r\n            const coinbaseTMP: CoinbaseHeaders[] = []\r\n            coinBaseIssueRows.forEach(issueRow => {\r\n                const matchinOrigData = originalData['Coinbase']?.find(x => x.id === issueRow.id)\r\n                if (matchinOrigData?.TransactionType === 'CONVERT') {\r\n                    const info = matchinOrigData.Notes.split(' ')\r\n                    //const soldAmount = info[1]\r\n                    //const soldCurrency = info[2]\r\n                    const boughAmount = Number(info[4])\r\n                    const boughtCurrency = info[5]\r\n                    coinbaseTMP.push({\r\n                        ...matchinOrigData,\r\n                        TransactionType: \"SELL\",\r\n                        id: nanoid(10),\r\n                        Fees: 0,\r\n                        Total: matchinOrigData.Total - matchinOrigData.Fees\r\n                    })\r\n                    coinbaseTMP.push({\r\n                        ...matchinOrigData,\r\n                        TransactionType: \"BUY\",\r\n                        id: nanoid(10),\r\n                        Asset: boughtCurrency,\r\n                        QuantityTransacted: boughAmount,\r\n                        SpotPriceatTransaction: matchinOrigData.Subtotal / boughAmount\r\n                    })\r\n                } else if (matchinOrigData?.TransactionType === 'COINBASE EARN') {\r\n                    coinbaseTMP.push({\r\n                        ...matchinOrigData,\r\n                        id: nanoid(10),\r\n                        TransactionType: \"BUY\",\r\n                    })\r\n                } else if (matchinOrigData?.TransactionType === 'RECEIVE') {\r\n                    coinbaseTMP.push({\r\n                        ...matchinOrigData,\r\n                        id: nanoid(10),\r\n                        TransactionType: \"BUY\",\r\n                    })\r\n                }\r\n            })\r\n\r\n            const correctedCoinbaseData = getCoinbaseAsColumns(coinbaseTMP)\r\n            // We do not need filter by unique since other operations than BUY and SELL are filtered below.\r\n            const combined = rawDataAsColumns.concat(correctedCoinbaseData ? correctedCoinbaseData as any : [])\r\n\r\n            // Replace IDs\r\n            const arrReplacedObj = combined.map(item => {\r\n                const obj = correctedCoinbaseData.find(newObj => newObj.id === item.id)\r\n                return obj ? obj : item\r\n            }) as ColumnDataSecurity[] | ColumnDataCrypto[]\r\n\r\n            /**\r\n             * In this function we need to get the 1values with the string.split function.\r\n             * Since some columns are formattes as value & currency (Ex. 10 EUR).\r\n             */\r\n            const fifoData = arrReplacedObj\r\n                .filter(type => type.operation === 'BUY' || type.operation === 'SELL')\r\n                .map(transaction => {\r\n                    return {\r\n                        symbol: transaction.tuote,\r\n                        date: new Date(transaction.paivays),\r\n                        price: Math.abs(Number(transaction.kurssi.split(' ')[0])),\r\n                        amount: Math.abs((transaction.maara)),\r\n                        type: transaction.operation as \"BUY\" | \"SELL\",\r\n                        transactionFee: Math.abs(Number(transaction.kulut.split(' ')[0])),\r\n                    }\r\n                })\r\n            console.log(fifoData)\r\n            const finalFifo = calculateFIFOTransactions(fifoData)\r\n            setResults(finalFifo.map((x, idx) => ({\r\n                ...x,\r\n                buydate: new Date(x.buydate),\r\n                selldate: new Date(x.selldate),\r\n                transferFee: `${Number(x.transferFee)} EUR`,\r\n                profitOrLoss: `${Number(x.profitOrLoss)} EUR`,\r\n                id: idx\r\n            })))\r\n\r\n            setCalculatedResults({\r\n                capitalGains: _.sumBy(finalFifo, (o) => o.profitOrLoss > 0 ? o.profitOrLoss : 0),\r\n                capitalLosses: _.sumBy(finalFifo, (o) => o.profitOrLoss < 0 ? o.profitOrLoss : 0),\r\n                transactionTotal: _.sumBy(finalFifo, (o) => Math.abs(o.transferFee) + Math.abs(o.acquisitionFee)),\r\n                netProfit: _.sumBy(finalFifo, (o) => o.profitOrLoss - (Math.abs(o.transferFee) + Math.abs(o.acquisitionFee)))\r\n            })\r\n\r\n        } catch (e: any) {\r\n            setErrorFifo(e.message)\r\n        }\r\n    }\r\n\r\n    const currencyClick = () => {\r\n        (async () => {\r\n            const additionlOperationTobeAdded = [] as any[]\r\n            const arrReplacedObj = await Promise.all(rawDataAsColumns.map(async item => {\r\n                const fixedCurrencies = [] as any[]\r\n                if ((item.operation === 'BUY' || item.operation === 'SELL') && item.kokonaissumma.split(' ')[1] !== \"EUR\") {\r\n                    const requestDate = moment(item.paivays).format('YYYY-MM-DD');\r\n                    const unitAsEur = (await (await axios.get(`https://api.coinbase.com/v2/prices/${item.tuote}-EUR/spot?date=${requestDate}`)).data.data)?.amount\r\n                    const percentageOfFee = Number(item.kulut.split(' ')[0]) / Number(item.kokonaissumma.split(' ')[0])\r\n                    const totalInEur = unitAsEur * item.maara\r\n                    const totalFee = totalInEur * percentageOfFee\r\n\r\n                    // Handle sell\r\n                    fixedCurrencies.push({\r\n                        ...item,\r\n                        kurssi: `${unitAsEur} EUR`,\r\n                        kulut: `${totalFee} EUR`,\r\n                        kokonaissumma: `${totalInEur - totalFee} EUR`,\r\n                    })\r\n                    /**\r\n                     * Need to handle Coinbase Pro incorrect currencies as SELL, BUY instead of just sell\r\n                     * SInce most of the entries are just from converting Currency x via uniswap (for example UNI to BTC )\r\n                     */\r\n                    if (originalData['CoinbasePro']?.find(y => y.id === item.id)) {\r\n                        additionlOperationTobeAdded.push({\r\n                            ...item,\r\n                            operation: \"BUY\",\r\n                            id: nanoid(10),\r\n                            tuote: `${item.arvo.split(' ')[1]}`,\r\n                            kurssi: `${unitAsEur} EUR`,\r\n                            kulut: `${totalFee} EUR`,\r\n                            kokonaissumma: `${totalInEur - totalFee} EUR`,\r\n                        })\r\n                    }\r\n                }\r\n                const obj = fixedCurrencies.find(newObj => newObj.id === item.id)\r\n                return obj ? obj : item\r\n            }))\r\n            setRawDataAsColumns([...arrReplacedObj.concat(additionlOperationTobeAdded)])\r\n            setRowDataColumn([...arrReplacedObj.concat(additionlOperationTobeAdded)])\r\n            setShowCurrencyFetchButton(false)\r\n            setParseError(\"\")\r\n        })()\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            if (files.length > 0) {\r\n                const data = (await chooseCSVParser(files, mode === \"CRYPTO\" ? parsersCrypto : parsersSecurity)) as resultFromParse\r\n\r\n                if ((data as any)[0]?.Error) {\r\n                    const msg = (data as any)[0].Error.message\r\n                    if (msg.toString().includes('All headers not found')) {\r\n                        setParseError(`${msg} Are you tryin to parse in the wrong site?`)\r\n                    } else if (msg === \"malformed URI sequence\") {\r\n                        setParseError(\"Unable to parse file, is it encoded in a weird format?\")\r\n                    } else {\r\n                        setParseError(msg)\r\n                    }\r\n                } else {\r\n                    const original = data.orig as rawDatas\r\n                    const rawKeys = (Object.keys(original) as Array<keyof typeof original>)\r\n                    const key = rawKeys[0]\r\n                    const dataSource = original[key]\r\n                    setRowDataColumn([...rowDataColumn.concat(data.rows as any)])\r\n                    setRawDataAsColumns([...rowDataColumn.concat(data.rows as any)])\r\n                    setOriginalData({\r\n                        ...originalData,\r\n                        [key]: dataSource\r\n                    })\r\n                    setShowTable(true)\r\n                }\r\n\r\n                setFiles([])\r\n            }\r\n        })()\r\n    }, [files])\r\n\r\n    useEffect(() => {\r\n        console.log(\"rowdataa\", rowDataColumn)\r\n        const enableCurrencyWarning = rowDataColumn\r\n            .filter(invalid => invalid?.kokonaissumma?.split(' ')[1] !== 'EUR'\r\n                && (invalid.operation === 'BUY'\r\n                    || invalid.operation === 'SELL'))\r\n        setShowCurrencyFetchButton(enableCurrencyWarning.length > 0 && rowDataColumn.length > 0)\r\n    }, [rowDataColumn])\r\n\r\n    useEffect(() => {\r\n        //console.log(\"oring update\", originalData)\r\n    }, [originalData])\r\n\r\n\r\n    useEffect(() => {\r\n        if (parseError.includes(\"In trancactions made in\")) {\r\n            setShowCurrencyFetchButton(true)\r\n        }\r\n    }, [parseError])\r\n\r\n\r\n    const theme = createTheme({\r\n        typography: {\r\n            fontSize: 14,\r\n        }\r\n    });\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <GlobalStyles styles={{ ul: { margin: 0, padding: 0, listStyle: 'none' } }} />\r\n            <CssBaseline />\r\n            <Container component=\"main\" sx={{ pt: 8, pb: 4 }}>\r\n                <Stack\r\n                    direction=\"column\"\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"center\"\r\n                    spacing={3}\r\n                    width=\"sm\"\r\n\r\n                >\r\n                    <Typography\r\n                        component=\"h1\"\r\n                        variant=\"h3\"\r\n                        align=\"center\"\r\n                        color=\"text.primary\"\r\n                        gutterBottom\r\n                        sx={{ fontWeight: 'bold', pt: 8 }}\r\n                    >\r\n                        VEROTUNKKI\r\n                    </Typography>\r\n                    <Typography alignSelf=\"center\" align=\"center\" variant=\"h6\" sx={{ pt: 0 }} component=\"p\">\r\n                        {mode === 'CRYPTO' ? \"Virtuaalivaluutat\" : \"Arvopaperit\"}\r\n                    </Typography>\r\n                    {parseError && <Alert severity=\"error\">{parseError}</Alert>}\r\n                    {results.length === 0 && <Dropzone zoneHeight={zoneHeight} handleFiles={fileCallback} />}\r\n                    {results.length > 0 &&\r\n                        <Stack direction=\"column\" alignItems=\"center\" justifyContent=\"center\" spacing={2} sx={{ pb: 4 }}>\r\n                            <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"center\" spacing={2}>\r\n                                <ResultCard header=\"Gross Capital Gain\"\r\n                                    content={calculatedResults.capitalGains.toFixed(2)}\r\n                                    footer=\"Gains\" footerSecondary=\"before losses and fees\"\r\n                                    contentColor=\"success.light\"\r\n                                />\r\n                                <ResultCard header=\"Gross Capital Loss\"\r\n                                    content={calculatedResults.capitalLosses.toFixed(2)}\r\n                                    footer=\"Losses\"\r\n                                    footerSecondary=\"before gains and fees\"\r\n                                    contentColor=\"error.light\"\r\n                                />\r\n                            </Stack>\r\n                            <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"center\" spacing={2}>\r\n                                <ResultCard header=\"Transaction Fees\"\r\n                                    content={calculatedResults.transactionTotal.toFixed(2)}\r\n                                    footer=\"Fees\" footerSecondary=\"acquisition and transfer Fees\"\r\n                                    contentColor=\"error.light\"\r\n                                />\r\n                                <ResultCard header=\"Net Capital Gain\"\r\n                                    content={calculatedResults.netProfit.toFixed(2)}\r\n                                    footer=\"Total\"\r\n                                    footerSecondary=\"Gains with fees and losses\"\r\n                                    contentColor={calculatedResults.netProfit > 0 ? 'success.light' : 'error.light'}\r\n                                />\r\n                            </Stack>\r\n                        </Stack>}\r\n                    <Typography alignSelf=\"flex-start\" sx={{ pl: 4 }} component=\"p\">\r\n                        {mode === 'CRYPTO' ? \"Tuetut lähteet: Coinbase, Coinbase Pro\" : \"Tuetut lähteet: Nordnet, Degiro\"}\r\n                    </Typography>\r\n                    {errorFifo && <Alert severity=\"error\">{errorFifo}</Alert>}\r\n                    {showCurrencyFetchButton && <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"center\" spacing={2}>\r\n                        <Alert severity=\"warning\" >\r\n                            You have made transactions that have not been traded in EUR. Do you want to use an external API to fetch the currency info? EXPERIMENTAL!\r\n                        </Alert>\r\n                        <Button variant=\"contained\" onClick={currencyClick} endIcon={<DownloadIcon />} >Fetch</Button>\r\n                    </Stack>}\r\n\r\n                    {showTable && !showCurrencyFetchButton && <Stack direction=\"row\" spacing={2}>\r\n                        <Button variant=\"outlined\" onClick={clearRows} startIcon={<DeleteIcon />}>\r\n                            Poistha\r\n                        </Button>\r\n                        <Button disabled={results.length > 0} onClick={calculateFIFO} variant=\"contained\" endIcon={<SendIcon />}>\r\n                            Laske\r\n                        </Button>\r\n                    </Stack>}\r\n\r\n                    {(showTable && results.length === 0) && <div style={{ width: '100%' }}>\r\n                        <PreviewTable rows={rowDataColumn} mode={mode} rawDataAsColumns={rawDataAsColumns} rawDatatSetCallback={rawDataSetCallback} />\r\n                    </div>}\r\n                    {results.length > 0 && <ResultTable rows={results} />}\r\n                </Stack>\r\n                {<Copyright />}\r\n            </Container>\r\n        </ThemeProvider >\r\n    );\r\n}\r\n\r\nexport { PreviewData }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Frontpage } from './components/Frontpage'\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\nimport { PreviewData } from './components/PreviewData'\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Routes>\n      <Route path=\"/\" element={<Frontpage />} />\n      <Route path=\"securities\" element={<PreviewData mode=\"SECURITY\" />} />\n      <Route path=\"crypto\" element={<PreviewData mode=\"CRYPTO\" />} />\n    </Routes>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}